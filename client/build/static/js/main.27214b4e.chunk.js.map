{"version":3,"sources":["Chat-App/GraphqQL/Queries/AccountQuery.js","Chat-App/Containers/title-image.js","Chat-App/Containers/login.js","Chat-App/GraphqQL/Mutations/AccountMutation.js","Chat-App/Containers/register.js","Chat-App/Reducers/userReducer.js","Chat-App/GraphqQL/Queries/ChatRoomQuery.js","Chat-App/GraphqQL/Mutations/CatchRoomMutation.js","Chat-App/Containers/components/roomComp.js","Chat-App/Containers/home/userRooms.js","Chat-App/Containers/home/otherrooms.js","Chat-App/Actions/action.js","Chat-App/Containers/home/main-page.js","Chat-App/Containers/home/room.js","Chat-App/Containers/privateRoute.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_QUERY","gql","CHECK_TOKEN_QUERY","TitleImage","text","GeneralWrapper","styled","div","InputBox","input","LoginPage","props","userNameRef","passwordRef","dispatch","useDispatch","errorState","useSelector","state","error","history","useHistory","location","useLocation","username","queryString","parse","search","slice","useLazyQuery","onCompleted","loginUser","localStorage","setItem","jwt","type","payload","push","login","loading","style","color","errorType","message","placeholder","ref","value","onClick","variables","user","password","to","pathname","textDecoration","fontSize","margin","REGISTER_MUTATION","RegisterPage","email","useMutation","registerUser","onError","console","log","register","data","UserReducer","action","GET_USER_ROOMS_QUERY","GET_OTHER_ROOMS_QUERY","GET_CHAT_ROOM_QUERY","CREATE_ROOM_MUTATION","JOIN_ROOM_MUTATION","LEAVE_ROOM_MUTATION","MEMBER_JOINED_ROOM","SEND_MESSAGE_MUTATION","DELETE_MESSAGE_MUTATION","UPDATE_MESSAGE_MUTATION","MESSAGE","InnerRooms","Room","room","joinRoom","userRoom","useState","members","setMembers","messages","setMessages","targetRoom","useSubscription","roomID","_id","onSubscriptionData","subscriptionData","actionType","prev","concat","filter","u","lastTimeSee","find","visitedRoom","numberOfUnreadMessages","reduce","curr","messageSentDate","Date","date","split","getTime","lastDateSeen","time","length","limit","display","alignItems","justifyContent","flex","marginRight","className","title","host","background","width","height","borderRadius","marginLeft","Container","Rooms","UserRooms","timeToRefetch","setTimeToRefetch","useQuery","fetchPolicy","refetch","join","storeError","useEffect","then","id","memberLength","e","textAlign","getUserRooms","map","Refresh","OtherRooms","position","getOtherRooms","logout","removeItem","client","clearStore","InnerDiv","LogOut","UserInformation","Innerbuttons","Profile","TextSpan","span","Button","button","InnerInputWrapper","MainPage","currentUser","create","Fragment","src","marginBottom","marginTop","alt","Array","fill","_","index","toLowerCase","parseInt","ChatBox","Members","TextPart","ChatTextInput","Send","Messages","ul","EditTextBubble","InnerMessage","li","checkOwner","TextBubble","TextInformationBubble","memberColor","LeaveGroup","UpdateText","ReplyWrapper","isReplied","ReplyText","RepliedMessageInfo","RepliedMessageInfo2","ReplyCloseIcon","RepliedMessageTextBubble","memberColors","chatText","match","params","err","subscribeToMore","isBeingUpdatedID","setIsBeingUpdatedID","setIsReplied","send","Loading","deleteMessage","updateMessage","leaveRoom","prevMessagesLength","useRef","current","usePrevious","getChatRoom","currentMessagesLength","OnSendMessage","repliedMessage","scrollToBottom","chatBox","document","querySelector","scrollTop","scrollHeight","onLeaveRoom","updateQuery","subMessage","updatedData","Object","assign","lastData","msg","isEdited","joinedMember","mergedData","m","fontWeight","letterSpacing","padding","listStyle","member","owner","findIndex","top","left","onKeyDown","ID","key","target","messageID","updatedText","defaultValue","maxLength","PrivateRoute","Component","component","rest","loadingC","setLoadingC","prevPath","path","currentPath","context","notifyOnNetworkStatusChange","checkToken","check","httpTerminatingLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","token","getItem","window","timeout","store","createStore","splitLink","query","definition","getMainDefinition","kind","operation","errorLink","graphQLErrors","networkError","el","extensions","code","href","middleWareLink","ApolloLink","forward","setContext","headers","getContext","authorization","ApolloClient","link","from","cache","InMemoryCache","App","exact","Login","Register","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27214b4e.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_QUERY = gql`\r\n  query Login($user: LoginInput!) {\r\n    loginUser(user: $user) {\r\n      username\r\n      email\r\n      jwt\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CHECK_TOKEN_QUERY = gql`\r\n  query Check {\r\n    checkToken {\r\n      username\r\n      email\r\n      _id\r\n      lastTimeSee {\r\n        time\r\n        roomID\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nexport const TitleImage = ( {text} )=> <h1> { text } </h1> ","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {useLazyQuery} from \"@apollo/client\";\r\nimport {LOGIN_QUERY} from \"../GraphqQL/Queries/AccountQuery\";\r\nimport {TitleImage} from \"./title-image\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport queryString from \"querystring\";\r\n\r\nconst GeneralWrapper = styled.div`\r\n display: flex;\r\n justify-content: center;\r\n align-items: center;\r\n flex-direction: column;\r\n height: 70%;\r\n width: 100%;\r\n`;\r\n\r\nconst InputBox = styled.input`\r\n margin-bottom: 10px;\r\n`;\r\n\r\nconst LoginPage = props => {\r\n const dispatch = useDispatch();\r\n const errorState = useSelector((state = {}) => state.error);\r\n const history = useHistory();\r\n\r\n const location = useLocation();\r\n\r\n const {username} = queryString.parse(location.search.slice(1));\r\n\r\n var userNameRef, passwordRef;\r\n\r\n const [login, {loading, error}] = useLazyQuery(LOGIN_QUERY, {\r\n  onCompleted: ({loginUser}) => {\r\n   localStorage.setItem(\"token\", loginUser.jwt);\r\n\r\n   dispatch({type: \"SET_USER\", payload: loginUser});\r\n\r\n   history.push(\"/main-page\");\r\n  },\r\n });\r\n\r\n const onLogin = () => {\r\n  login({\r\n   variables: {\r\n    user: {\r\n     username: userNameRef.value || null,\r\n     password: passwordRef.value || null,\r\n    },\r\n   },\r\n  });\r\n };\r\n\r\n return (\r\n  <GeneralWrapper>\r\n   <TitleImage text='Welcome To The Group-Chat !' />{\" \"}\r\n   {username ? (\r\n    <h5 style={{color: \"green\"}}>You Registered. Lets Sign In !</h5>\r\n   ) : null}\r\n   {loading ? (\r\n    <h6>Giriş Yapılıyor</h6>\r\n   ) : error ? (\r\n    <h5 style={{color: \"red\"}}>\r\n     {\" \"}\r\n     {errorState.errorType + \" \" + errorState.message}{\" \"}\r\n    </h5>\r\n   ) : null}\r\n   <InputBox\r\n    placeholder='Username'\r\n    ref={ref => (userNameRef = ref)}\r\n    value={username}\r\n   />\r\n   <InputBox\r\n    placeholder='Password'\r\n    ref={ref => (passwordRef = ref)}\r\n    type='password'\r\n   />\r\n   <button\r\n    onClick={() => {\r\n     onLogin();\r\n    }}\r\n   >\r\n    {\" \"}\r\n    LOG IN{\" \"}\r\n   </button>\r\n   <Link\r\n    to={{pathname: \"/register\"}}\r\n    style={{\r\n     textDecoration: \"none\",\r\n     fontSize: 13,\r\n     margin: 5,\r\n    }}\r\n   >\r\n    {\" \"}\r\n    Go to Register !{\" \"}\r\n   </Link>\r\n  </GeneralWrapper>\r\n );\r\n};\r\n\r\nexport default LoginPage;\r\n","import {gql} from '@apollo/client'\r\n\r\nexport const REGISTER_MUTATION = gql`\r\n\r\n    mutation Register($user:RegisterInput!){\r\n\r\n        registerUser(user:$user) {\r\n            username\r\n        }\r\n\r\n    }\r\n    \r\n`","import { useMutation } from '@apollo/client';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport {REGISTER_MUTATION} from '../GraphqQL/Mutations/AccountMutation';\r\nimport {TitleImage} from './title-image'\r\nimport {Link , useHistory} from 'react-router-dom'\r\nimport { useSelector , useDispatch } from 'react-redux';\r\n\r\nconst GeneralWrapper = styled.div`\r\n\r\ndisplay:flex;\r\njustify-content:center;\r\nalign-items:center;\r\nflex-direction:column;\r\nheight:70%;\r\nwidth:100%;\r\n\r\n`\r\n\r\nconst InputBox = styled.input` margin-bottom:10px `\r\n\r\nconst RegisterPage = ( props )=>{\r\n    const history = useHistory();\r\n    const errorState = useSelector( ( state = {} ) => state.error );\r\n    const [ register , { data , loading , error } ] = useMutation(REGISTER_MUTATION , {\r\n            onCompleted:( { registerUser } )=>{\r\n                history.push(`/login/?username=${registerUser.username}`);\r\n            } ,\r\n            onError:(error)=>{ console.log(error); }\r\n    })\r\n    let userNameRef , passwordRef , email;  \r\n    const onRegister = ()=>{\r\n        register({\r\n\r\n            variables:{\r\n                user:{\r\n                    username:userNameRef.value || null,\r\n                    email:email.value || null,\r\n                    password:passwordRef.value || null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return <GeneralWrapper>\r\n    <TitleImage text = \"Register to the Group-Chat\" />\r\n        { loading ? <h6> Registering... </h6> : null }  \r\n        { error ? <h5 style={{ color:\"red\"} } > { errorState.errorType + \" \" + errorState.message } </h5> : null}\r\n        <InputBox placeholder=\"Username\" ref={ ref => userNameRef = ref } />\r\n        <InputBox placeholder=\"email\" ref={ ref => email = ref }  />\r\n        <InputBox placeholder=\"Password\" ref={ ref => passwordRef = ref } type=\"password\" /> \r\n        <button onClick={ ()=>{ onRegister(); } } > REGISTER </button>\r\n        <Link to={{\r\n            pathname:\"/login\"\r\n        }}  style ={{\r\n             textDecoration:'none',\r\n             fontSize:13,\r\n             margin:5\r\n        }}> Go to Login ! </Link>\r\n\r\n    </GeneralWrapper>;\r\n\r\n}\r\n\r\nexport default RegisterPage;","import { client } from '../../App'\r\n\r\n\r\nconst UserReducer = ( state , action )=>{\r\n \r\n    \r\n    switch( action.type ) {\r\n\r\n        case \"SET_USER\": \r\n\r\n            return {\r\n                ...state,\r\n                user:action.payload,\r\n            }\r\n\r\n        case \"SET_ERROR\": \r\n\r\n            return {\r\n                ...state,\r\n                 error:action.payload\r\n            }\r\n            \r\n\r\n        case \"LOGOUT\": \r\n\r\n            return {\r\n                ...action.payload\r\n            }   \r\n        \r\n        default: \r\n\r\n            return state\r\n            \r\n            break;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default UserReducer;","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_USER_ROOMS_QUERY = gql`\r\n  query GetRooms {\r\n    getUserRooms {\r\n      _id\r\n      limit\r\n      title\r\n      members {\r\n        username\r\n        _id\r\n      }\r\n      messages {\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_OTHER_ROOMS_QUERY = gql`\r\n  query GetOtherRooms {\r\n    getOtherRooms {\r\n      _id\r\n      limit\r\n      title\r\n      members {\r\n        username\r\n        _id\r\n      }\r\n      host {\r\n        username\r\n        _id\r\n      }\r\n      messages {\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CHAT_ROOM_QUERY = gql`\r\n  query GetChatRoom($roomID: ID!) {\r\n    getChatRoom(roomID: $roomID) {\r\n      limit\r\n\r\n      host {\r\n        _id\r\n      }\r\n\r\n      messages {\r\n        _id\r\n        text\r\n        owner {\r\n          username\r\n          _id\r\n        }\r\n        isEdited\r\n        date\r\n        repliedMessage {\r\n          _id\r\n          owner {\r\n            username\r\n            _id\r\n          }\r\n          text\r\n          date\r\n        }\r\n      }\r\n\r\n      members {\r\n        username\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import {gql} from '@apollo/client'\r\n\r\nexport const CREATE_ROOM_MUTATION = gql`\r\n\r\n    mutation CreateRoom($room:RoomInput!){\r\n\r\n        createRoom(room:$room) {\r\n            title\r\n            limit\r\n        }\r\n\r\n    }\r\n    \r\n`\r\n\r\nexport const JOIN_ROOM_MUTATION = gql`\r\n    mutation JoinRoom($roomID:ID!,$limit:Int!,$memberLength:Int!) {\r\n        joinRoom(roomID:$roomID,limit:$limit,memberLength:$memberLength) {\r\n            _id\r\n            title\r\n            limit\r\n        }\r\n    }\r\n`\r\n\r\nexport const LEAVE_ROOM_MUTATION = gql`\r\n\r\n    mutation LeaveRoom($roomID:ID!) {\r\n\r\n        leaveRoom(roomID:$roomID) {\r\n\r\n            title\r\n            _id\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n`\r\n\r\n\r\nexport const MEMBER_JOINED_ROOM = gql`\r\n\r\n    subscription MemberJoined($roomID:ID) {\r\n        room(roomID:$roomID) {\r\n\r\n             user {\r\n                username\r\n                _id         \r\n             }\r\n            \r\n             roomID\r\n             actionType\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport const SEND_MESSAGE_MUTATION = gql`\r\n\r\n    mutation SendMessage($text:String!,$roomID:ID!,$repliedMessage:ID) {\r\n        sendMessage(text:$text,roomID:$roomID,repliedMessage:$repliedMessage) {\r\n            _id\r\n            text\r\n        }\r\n    }\r\n\r\n`\r\n\r\nexport const DELETE_MESSAGE_MUTATION = gql`\r\n\r\n    mutation DeleteMessage($messageID:ID!,$roomID:ID!) {\r\n\r\n        deleteMessage(messageID:$messageID,roomID:$roomID) {\r\n            _id\r\n            text\r\n        }\r\n    }\r\n`\r\nexport const UPDATE_MESSAGE_MUTATION = gql`\r\n\r\n    mutation UpdateMessage($messageID:ID!,$updatedText:String!,$roomID:ID!) {\r\n\r\n        updateMessage(messageID:$messageID,updatedText:$updatedText,roomID:$roomID){\r\n\r\n            _id\r\n            text\r\n        }\r\n\r\n    }\r\n\r\n`\r\n\r\nexport const MESSAGE = gql`\r\n\r\n    subscription MessageSent($roomID:ID!) {\r\n\r\n        message(roomID:$roomID) {\r\n            _id\r\n            text\r\n            date\r\n            isEdited\r\n            owner {\r\n                username\r\n                _id\r\n            }\r\n            actionType\r\n        }\r\n\r\n    }\r\n\r\n`\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {useSubscription} from \"@apollo/client\";\r\nimport styled from \"styled-components\";\r\nimport {MEMBER_JOINED_ROOM} from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {MESSAGE} from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\n\r\nconst InnerRooms = styled.div`\r\n display: flex;\r\n\r\n padding: 10px;\r\n align-items: center;\r\n &:hover {\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\r\n   rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n  cursor: pointer;\r\n }\r\n`;\r\n\r\nexport const Room = ({room, joinRoom, userRoom}) => {\r\n // it iss so logical to set useSubscription in every room component\r\n\r\n const [members, setMembers] = useState(room.members);\r\n const [messages, setMessages] = useState(room.messages);\r\n\r\n const joinSubs = useSubscription(MEMBER_JOINED_ROOM, {\r\n  variables: {\r\n   roomID: room._id,\r\n  },\r\n  onSubscriptionData: ({subscriptionData}) => {\r\n   if (subscriptionData.data.room.actionType == \"JOIN\") {\r\n    setMembers(prev => prev.concat(subscriptionData.data.room.user));\r\n   } else if (subscriptionData.data.room.actionType == \"LEAVE\") {\r\n    setMembers(prev =>\r\n     prev.filter(u => subscriptionData.data.room.user._id != u._id)\r\n    );\r\n   }\r\n  },\r\n });\r\n const messageSubs = useSubscription(MESSAGE, {\r\n  variables: {\r\n   roomID: room._id,\r\n  },\r\n  onSubscriptionData: ({subscriptionData}) => {\r\n   if (subscriptionData.data.message.actionType == \"SEND\") {\r\n    setMessages(prev => prev.concat(subscriptionData.data.message));\r\n   }\r\n  },\r\n });\r\n\r\n const currentUser = useSelector((state = {}) => state.user);\r\n const targetRoom = currentUser.lastTimeSee?.find(visitedRoom => {\r\n  return visitedRoom.roomID == room._id;\r\n });\r\n let numberOfUnreadMessages = !targetRoom\r\n  ? messages.length\r\n  : messages.reduce((prev, curr) => {\r\n     const messageSentDate = new Date(curr.date.split(\"-\")[1]).getTime();\r\n     const lastDateSeen = new Date(+targetRoom.time).getTime();\r\n     console.log(lastDateSeen + \" \" + messageSentDate);\r\n     if (messageSentDate > lastDateSeen) {\r\n      return ++prev;\r\n     } else {\r\n      return prev;\r\n     }\r\n    }, 0);\r\n return (\r\n  <InnerRooms\r\n   key={room._id}\r\n   onClick={joinRoom(room._id, room.limit, members.length)}\r\n  >\r\n   <span\r\n    style={{\r\n     display: \"flex\",\r\n     alignItems: \"center\",\r\n     justifyContent: \"flex-start\",\r\n     flex: 1,\r\n    }}\r\n   >\r\n    <i\r\n     style={{\r\n      marginRight: 8,\r\n      color: userRoom ? \"#f05454\" : \"#00af91\",\r\n     }}\r\n     className='fas fa-comment'\r\n    ></i>\r\n    {room.title.length > 10 ? room.title.slice(0, 5) + \"...\" : room.title}{\" \"}\r\n   </span>\r\n   {!userRoom && (\r\n    <span\r\n     style={{\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-start\",\r\n      flex: 1,\r\n     }}\r\n    >\r\n     <i\r\n      style={{\r\n       marginRight: 8,\r\n       color: \"#00af91\",\r\n      }}\r\n      className='fas fa-wifi'\r\n     ></i>\r\n     {room.host.username}{\" \"}\r\n    </span>\r\n   )}\r\n   <span\r\n    style={{\r\n     display: \"flex\",\r\n     alignItems: \"center\",\r\n     color: members.length === room.limit ? \"red\" : \"#76a21e\",\r\n     justifyContent: \"space-between\",\r\n     flex: 0.2,\r\n    }}\r\n   >\r\n    <i\r\n     style={{\r\n      marginRight: 8,\r\n      color: userRoom ? \"#f05454\" : \"#00af91\",\r\n     }}\r\n     className='fas fa-user-friends'\r\n    ></i>\r\n    {members.length + \"/\" + room.limit}{\" \"}\r\n   </span>\r\n   {numberOfUnreadMessages > 0 && (\r\n    <span\r\n     style={{\r\n      background: \"#FF6767\",\r\n      width: 20,\r\n      height: 20,\r\n      borderRadius: \"50%\",\r\n      color: \"white\",\r\n      marginLeft: 10,\r\n      fontSize: 11,\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n     }}\r\n    >\r\n     {numberOfUnreadMessages}{\" \"}\r\n    </span>\r\n   )}{\" \"}\r\n  </InnerRooms>\r\n );\r\n};\r\n","import React, {useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useQuery, useMutation} from \"@apollo/client\";\r\nimport {GET_USER_ROOMS_QUERY} from \"../../GraphqQL/Queries/ChatRoomQuery\";\r\nimport {JOIN_ROOM_MUTATION} from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\nimport {Room} from \"../components/roomComp\";\r\n\r\nconst Container = styled.div`\r\n padding: 15px;\r\n display: flex;\r\n flex-direction: column;\r\n box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\r\n  rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n width: 40%;\r\n height: 90%;\r\n box-sizing: border-box;\r\n`;\r\n\r\nconst Rooms = styled.div`\r\n width: 100%;\r\n height: 100%;\r\n display: flex;\r\n flex-direction: column;\r\n margin-top: 25px;\r\n`;\r\n\r\nconst UserRooms = ({timeToRefetch, setTimeToRefetch}) => {\r\n const {data, loading, error, refetch} = useQuery(GET_USER_ROOMS_QUERY, {\r\n  fetchPolicy: \"network-only\",\r\n });\r\n\r\n const history = useHistory();\r\n\r\n const [join] = useMutation(JOIN_ROOM_MUTATION, {\r\n  onError: error => console.log(error),\r\n\r\n  onCompleted: ({joinRoom}) => {\r\n   history.push(\"/room/\" + joinRoom._id);\r\n  },\r\n });\r\n\r\n const storeError = useSelector((state = {}) => state.error);\r\n\r\n useEffect(() => {\r\n  if (timeToRefetch) {\r\n   refetch().then(() => {\r\n    setTimeToRefetch(false);\r\n   });\r\n  }\r\n }, [timeToRefetch]);\r\n\r\n const joinRoom = (id, limit, memberLength) => e => {\r\n  join({\r\n   variables: {\r\n    roomID: id,\r\n    limit,\r\n    memberLength,\r\n   },\r\n  });\r\n };\r\n return (\r\n  <Container>\r\n   <span style={{textAlign: \"center\"}}>My Rooms</span>\r\n   <Rooms>\r\n    {\" \"}\r\n    {loading ? (\r\n     <span>Fetching...</span>\r\n    ) : error ? (\r\n     <span> {storeError.errorType + \" \" + storeError.message} </span>\r\n    ) : (\r\n     data.getUserRooms.map(room => {\r\n      return (\r\n       <Room key={room._id} room={room} joinRoom={joinRoom} userRoom={true} />\r\n      );\r\n     })\r\n    )}{\" \"}\r\n   </Rooms>\r\n  </Container>\r\n );\r\n};\r\n\r\nexport default UserRooms;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { GET_OTHER_ROOMS_QUERY } from \"../../GraphqQL/Queries/ChatRoomQuery\";\r\nimport { JOIN_ROOM_MUTATION } from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\nimport { Room } from \"../components/roomComp\";\r\n\r\nconst Container = styled.div`\r\n  padding: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\r\n    rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n  width: 40%;\r\n  height: 90%;\r\n  box-sizing: border-box;\r\n`;\r\nconst Rooms = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 25px;\r\n`;\r\n\r\nconst Refresh = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst OtherRooms = () => {\r\n  const { data, loading, error, refetch } = useQuery(GET_OTHER_ROOMS_QUERY, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n  const history = useHistory();\r\n  const [join] = useMutation(JOIN_ROOM_MUTATION, {\r\n    onError: (error) => console.log(error),\r\n    onCompleted: ({ joinRoom }) => {\r\n      history.push(\"/room/\" + joinRoom._id);\r\n    },\r\n  });\r\n  const storeError = useSelector((state = {}) => state.error);\r\n  const joinRoom = (id, limit, memberLength) => (e) => {\r\n    join({\r\n      variables: {\r\n        roomID: id,\r\n        limit,\r\n        memberLength,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <span style={{ textAlign: \"center\", position: \"relative\" }}>\r\n        Other Rooms\r\n        <Refresh onClick={() => refetch()} className=\"fas fa-sync\"></Refresh>\r\n      </span>\r\n      <Rooms>\r\n        {loading ? (\r\n          <span> Rooms are loading... </span>\r\n        ) : error ? (\r\n          <span> {storeError.errorType + \" \" + storeError.message} </span>\r\n        ) : (\r\n          data.getOtherRooms.map((room) => {\r\n            return <Room key={room._id} room={room} joinRoom={joinRoom} />;\r\n          })\r\n        )}\r\n      </Rooms>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OtherRooms;\r\n","import { client } from '../../App'\r\n\r\nexport const logout = ()=>{ // we can use actions to do some operations about the login state\r\n\r\n        localStorage.removeItem('token');\r\n        client.clearStore();\r\n\r\n        return {\r\n           type:'LOGOUT',\r\n           payload:{\r\n               user:{},\r\n               error:{}\r\n           }\r\n        }\r\n\r\n}","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport UserRooms from \"./userRooms\";\r\nimport OtherRooms from \"./otherrooms\";\r\nimport {logout} from \"../../Actions/action\"; // import RoomQuery from './roomQuery'\r\nimport {useMutation} from \"@apollo/client\";\r\nimport {CREATE_ROOM_MUTATION} from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\n\r\nconst GeneralWrapper = styled.div`\r\n display: flex;\r\n justify-content: space-around;\r\n align-items: center;\r\n height: 100%;\r\n width: 88%;\r\n margin: 0 auto;\r\n`;\r\n\r\nconst InnerDiv = styled.div`\r\n height: 500px;\r\n box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\r\n  rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\r\n flex: 0.75;\r\n display: flex;\r\n justify-content: space-evenly;\r\n align-items: center;\r\n box-sizing: border-box;\r\n padding: 10px;\r\n`;\r\n\r\nconst LogOut = styled.div`\r\n position: fixed;\r\n height: 40px;\r\n width: 100px;\r\n top: 10px;\r\n left: 10px;\r\n box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\r\n  rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\r\n &:hover {\r\n  cursor: pointer;\r\n  background: blue;\r\n  color: white;\r\n  transition: 100ms;\r\n }\r\n display: flex;\r\n align-items: center;\r\n justify-content: center;\r\n`;\r\n\r\nconst UserInformation = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n align-items: flex-start;\r\n width: 70%;\r\n`;\r\nconst Innerbuttons = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n align-items: center;\r\n width: 100%;\r\n margin-top: 30px;\r\n`;\r\n\r\nconst Profile = styled.div`\r\n box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\r\n  rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\r\n height: 500px;\r\n flex: 0.2;\r\n display: flex;\r\n flex-direction: column;\r\n border-radius: 8px;\r\n align-items: center;\r\n`;\r\nconst TextSpan = styled.span`\r\n font-size: 13px;\r\n margin: 3px;\r\n`;\r\nconst Button = styled.button`\r\n border: none;\r\n padding: 10px;\r\n width: 100%;\r\n margin-top: 15px;\r\n display: flex;\r\n justify-content: space-around;\r\n cursor: pointer;\r\n &:hover {\r\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\r\n   rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\r\n }\r\n`;\r\nconst InnerInputWrapper = styled.div`\r\n display: flex;\r\n flex-direction: column;\r\n width: 80%;\r\n font-size: 14px;\r\n margin-top: 20px;\r\n`;\r\n\r\nconst MainPage = props => {\r\n const currentUser = useSelector((state = {}) => state.user || {});\r\n const [create, {error}] = useMutation(CREATE_ROOM_MUTATION, {\r\n  onError: error => {\r\n   console.log(error);\r\n  },\r\n });\r\n\r\n const dispatch = useDispatch();\r\n const history = useHistory();\r\n const storeError = useSelector((state = {}) => state.error);\r\n const [timeToRefetch, setTimeToRefetch] = useState(false);\r\n\r\n let limit, title;\r\n\r\n const onLogout = () => {\r\n  localStorage.removeItem(\"token\");\r\n  dispatch(logout());\r\n  history.push(\"/login\");\r\n };\r\n\r\n const createRoom = () => {\r\n  create({\r\n   variables: {\r\n    room: {\r\n     title: title.value.toLowerCase() || null,\r\n     limit: parseInt(limit.value) || null,\r\n    },\r\n   },\r\n  }).then(() => {\r\n   setTimeToRefetch(true);\r\n  });\r\n };\r\n\r\n return (\r\n  <React.Fragment>\r\n   <GeneralWrapper>\r\n    <LogOut onClick={onLogout}>LOG OUT</LogOut>\r\n\r\n    <Profile>\r\n     <img\r\n      src='/userpng.png'\r\n      width='60%'\r\n      style={{\r\n       marginBottom: 20,\r\n       marginTop: 20,\r\n      }}\r\n      alt={\"user\"}\r\n     />\r\n\r\n     <UserInformation>\r\n      <TextSpan>username : {currentUser.username} </TextSpan>\r\n      <TextSpan>email : {currentUser.email} </TextSpan>\r\n     </UserInformation>\r\n\r\n     <Innerbuttons>\r\n      <InnerInputWrapper>\r\n       <div\r\n        style={{\r\n         display: \"flex\",\r\n         justifyContent: \"space-between\",\r\n         width: \"100%\",\r\n        }}\r\n       >\r\n        <span>Title :</span>\r\n        <input\r\n         ref={ref => (title = ref)}\r\n         style={{width: \"50%\"}}\r\n         placeholder='title'\r\n        />\r\n       </div>\r\n\r\n       <div\r\n        style={{\r\n         display: \"flex\",\r\n         marginTop: 6,\r\n         justifyContent: \"space-between\",\r\n         width: \"100%\",\r\n        }}\r\n       >\r\n        <span>Max People :</span>\r\n\r\n        <select style={{width: \"100px\"}} ref={ref => (limit = ref)}>\r\n         {Array(10)\r\n          .fill()\r\n          .map((_, index) => (\r\n           <option key={index}>{index + 1} </option>\r\n          ))}{\" \"}\r\n        </select>\r\n       </div>\r\n\r\n       <span style={{color: \"red\"}}>\r\n        {\" \"}\r\n        {error && storeError.errorType + \" \" + storeError.message}{\" \"}\r\n       </span>\r\n       <Button onClick={createRoom}>\r\n        {\" \"}\r\n        Create Room\r\n        <i className='fas fa-plus'></i>{\" \"}\r\n       </Button>\r\n      </InnerInputWrapper>\r\n      {/* <InnerInputWrapper>\r\n\r\n                         \r\n                            <input style={{width:'100%'}} placeholder=\"Search...\"/>\r\n\r\n                            <Button onClick={createRoom}> Search Room  <i className=\"fas fa-search\"></i> </Button>\r\n\r\n                    </InnerInputWrapper> */}{\" \"}\r\n     </Innerbuttons>\r\n    </Profile>\r\n\r\n    <InnerDiv>\r\n     <UserRooms\r\n      timeToRefetch={timeToRefetch}\r\n      setTimeToRefetch={setTimeToRefetch}\r\n     />\r\n     <OtherRooms />\r\n    </InnerDiv>\r\n   </GeneralWrapper>\r\n  </React.Fragment>\r\n );\r\n};\r\n\r\nexport default MainPage;\r\n","import React, {useEffect, useState, useRef} from \"react\";\r\nimport {useQuery, useMutation} from \"@apollo/client\";\r\nimport {GET_CHAT_ROOM_QUERY} from \"../../GraphqQL/Queries/ChatRoomQuery\";\r\nimport {\r\n SEND_MESSAGE_MUTATION,\r\n MESSAGE,\r\n MEMBER_JOINED_ROOM,\r\n DELETE_MESSAGE_MUTATION,\r\n LEAVE_ROOM_MUTATION,\r\n UPDATE_MESSAGE_MUTATION,\r\n} from \"../../GraphqQL/Mutations/CatchRoomMutation\";\r\nimport styled from \"styled-components\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nlet x;\r\n\r\nconst GeneralWrapper = styled.div`\r\n display: flex;\r\n justify-content: center;\r\n align-items: center;\r\n height: 100%;\r\n margin: 0 auto;\r\n background: #242c37;\r\n position: relative;\r\n`;\r\nconst ChatBox = styled.div`\r\n height: 530px;\r\n box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em,\r\n  rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em,\r\n  rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\r\n display: flex;\r\n flex-direction: column;\r\n justify-content: space-between;\r\n align-items: center;\r\n box-sizing: border-box;\r\n width: 44%;\r\n margin-left: 20px;\r\n padding: 10px;\r\n background: white;\r\n`;\r\nconst Members = styled.div`\r\n box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em,\r\n  rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em,\r\n  rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\r\n height: 530px;\r\n width: 19%;\r\n display: flex;\r\n flex-direction: column;\r\n\r\n align-items: center;\r\n box-sizing: border-box;\r\n padding: 10px;\r\n background: white;\r\n`;\r\n// ................................\r\n\r\nconst TextPart = styled.div`\r\n display: flex;\r\n justify-content: space-between;\r\n width: 100%;\r\n`;\r\n\r\nconst ChatTextInput = styled.input`\r\n flex: 0.83;\r\n height: 30px;\r\n font-size: 17px;\r\n background: #628395;\r\n color: white;\r\n border: none;\r\n padding: 5px 10px;\r\n outline: none;\r\n`;\r\n\r\nconst Send = styled.button`\r\n background: #ef4f4f;\r\n color: white;\r\n border: none;\r\n flex: 0.15;\r\n &:hover {\r\n  cursor: pointer;\r\n }\r\n`;\r\n\r\nconst Messages = styled.ul`\r\n flex: 0.94;\r\n width: 100%;\r\n display: flex;\r\n flex-direction: column;\r\n list-style: none;\r\n margin: 0;\r\n padding: 0;\r\n overflow: scroll;\r\n overflow-x: hidden;\r\n`;\r\n\r\nconst EditTextBubble = styled.div`\r\n align-items: center;\r\n justify-content: center;\r\n display: flex;\r\n overflow: hidden;\r\n width: 0;\r\n transition: 110ms;\r\n`;\r\n\r\nconst InnerMessage = styled.li`\r\n width: 100%;\r\n display: flex;\r\n list-style: none;\r\n flex-direction: ${({checkOwner}) => (checkOwner ? \"row\" : \"row-reverse\")};\r\n justify-content: flex-end;\r\n align-items: center;\r\n padding: 8px 15px 8px 15px;\r\n border-radius: 5px;\r\n box-sizing: border-box;\r\n &:hover {\r\n  cursor: pointer;\r\n  box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\r\n }\r\n &:hover ${EditTextBubble} {\r\n  margin: ${({checkOwner}) => (checkOwner ? \"0 1.5px\" : \"0 8px 0 1.5px\")};\r\n  width: 20px;\r\n  cursor: pointer;\r\n }\r\n`;\r\n\r\nconst TextBubble = styled.div`\r\n background: #628395;\r\n color: white;\r\n padding: 6px 8px;\r\n border-radius: 5px;\r\n max-width: 35%;\r\n white-space: normal;\r\n overflow-wrap: break-word;\r\n`;\r\n\r\nconst TextInformationBubble = styled.span`\r\n display: flex;\r\n flex-direction: column;\r\n justify-content: center;\r\n font-size: 10px;\r\n padding: 0 7px;\r\n align-items: center;\r\n color: ${({memberColor}) => memberColor};\r\n`;\r\n\r\nconst LeaveGroup = styled.button`\r\n background: #ef4f4f;\r\n color: white;\r\n border: none;\r\n border-radius: 8px;\r\n font-size: 12px;\r\n &:hover {\r\n  cursor: pointer;\r\n }\r\n position: absolute;\r\n top: 20px;\r\n left: 20px;\r\n padding: 10px;\r\n`;\r\nconst UpdateText = styled.input`\r\n outline: none;\r\n border-radius: 7px;\r\n border: none;\r\n padding: 5px;\r\n color: white;\r\n background: #007580;\r\n`;\r\n// -------------------------------------------------------------------------------\r\n\r\nconst ReplyWrapper = styled.div`\r\n overflow: hidden;\r\n transition: 110ms;\r\n width: 100%;\r\n border-radius: 7px;\r\n position: relative;\r\n display: flex;\r\n background: #242c37;\r\n justify-content: space-between;\r\n align-items: center;\r\n margin-bottom: 5px;\r\n height: ${({isReplied}) => (isReplied ? \"75px\" : \"0px\")};\r\n`;\r\nconst ReplyText = styled.div`\r\n height: 100%;\r\n width: 100%;\r\n color: white;\r\n box-sizing: border-box;\r\n display: flex;\r\n align-items: center;\r\n padding: 20px 10px;\r\n font-size: 14px;\r\n overflow-wrap: break-word;\r\n white-space: normal;\r\n`;\r\nconst RepliedMessageInfo = styled.div`\r\n display: flex;\r\n width: 100%;\r\n justify-content: space-between;\r\n margin-bottom: 5px;\r\n color: ${({color}) => color};\r\n font-size: 11px;\r\n`;\r\n\r\nconst RepliedMessageInfo2 = styled.div`\r\n position: absolute;\r\n color: ${({color}) => color};\r\n top: 8px;\r\n left: 8px;\r\n font-size: 11px;\r\n`;\r\n\r\nconst ReplyCloseIcon = styled.div`\r\n font-size: 20px;\r\n &:hover {\r\n  cursor: pointer;\r\n }\r\n color: grey;\r\n margin-right: 20px;\r\n`;\r\nconst RepliedMessageTextBubble = styled.div`\r\n background: #323d4d;\r\n color: white;\r\n border-radius: 5px;\r\n max-width: 35%;\r\n min-width: 93px;\r\n white-space: normal;\r\n display: flex;\r\n position: relative;\r\n display: flex;\r\n padding: 10px;\r\n flex-direction: column;\r\n overflow-wrap: break-word;\r\n margin-right: 4px;\r\n margin-left: 4px;\r\n font-size: 14px;\r\n`;\r\nconst memberColors = [\r\n \"#F8485E \",\r\n \"#00C1D4\",\r\n \"DarkCyan\",\r\n \"DarkGoldenRod\",\r\n \"DarkBlue\",\r\n \"DarkRed\",\r\n \"DarkOrange\",\r\n \"Indigo\",\r\n \"Purple\",\r\n \"YellowGreen\",\r\n];\r\n\r\nconst usePrevious = value => {\r\n const ref = useRef();\r\n useEffect(() => {\r\n  ref.current = value;\r\n });\r\n return ref.current;\r\n};\r\n\r\nconst Room = ({match, history}) => {\r\n const {data, loading, subscribeToMore} = useQuery(GET_CHAT_ROOM_QUERY, {\r\n  variables: {\r\n   roomID: match.params.id,\r\n  },\r\n  onError: err => {\r\n   history.push(\"/main-page\");\r\n  },\r\n });\r\n const [isBeingUpdatedID, setIsBeingUpdatedID] = useState(false);\r\n const [isReplied, setIsReplied] = useState();\r\n const [send, {loading: Loading}] = useMutation(SEND_MESSAGE_MUTATION);\r\n const [deleteMessage] = useMutation(DELETE_MESSAGE_MUTATION);\r\n const [updateMessage] = useMutation(UPDATE_MESSAGE_MUTATION);\r\n const [leaveRoom] = useMutation(LEAVE_ROOM_MUTATION, {\r\n  onCompleted: data => {\r\n   history.push(\"/main-page\");\r\n  },\r\n  onError: err => {\r\n   console.log(err);\r\n  },\r\n });\r\n const currentUser = useSelector((state = {}) => state.user);\r\n const prevMessagesLength = usePrevious(data?.getChatRoom.messages.length);\r\n const currentMessagesLength = data?.getChatRoom.messages.length;\r\n const OnSendMessage = () => {\r\n  if (chatText.value) {\r\n   setIsReplied(null);\r\n   send({\r\n    variables: {\r\n     text: chatText.value || null,\r\n     roomID: match.params.id || null,\r\n     repliedMessage: isReplied?._id,\r\n    },\r\n   });\r\n  }\r\n };\r\n const scrollToBottom = () => {\r\n  var chatBox = document.querySelector(\".chatMessages\");\r\n  chatBox.scrollTop = chatBox.scrollHeight;\r\n };\r\n const onLeaveRoom = () => {\r\n  leaveRoom({\r\n   variables: {\r\n    roomID: match.params.id,\r\n   },\r\n  });\r\n };\r\n const OnDeleteMessage = ID => {\r\n  deleteMessage({\r\n   variables: {\r\n    messageID: ID || null,\r\n    roomID: match.params.id || null,\r\n   },\r\n  });\r\n };\r\n const onUpdateMessage = (ID, value) => {\r\n  updateMessage({\r\n   variables: {\r\n    messageID: ID || null,\r\n    roomID: match.params.id || null,\r\n    updatedText: value || null,\r\n   },\r\n  });\r\n };\r\n useEffect(() => {\r\n  // we can handle user's status in room by using unmount function provided by useffect !\r\n  return () => {\r\n   onLeaveRoom();\r\n  };\r\n }, []);\r\n useEffect(() => {\r\n  if (!loading) {\r\n   scrollToBottom();\r\n  }\r\n }, [loading]);\r\n useEffect(() => {\r\n  if (!loading) {\r\n   if (currentMessagesLength > prevMessagesLength) {\r\n    scrollToBottom();\r\n   }\r\n  }\r\n }, [currentMessagesLength]);\r\n useEffect(() => {\r\n  subscribeToMore({\r\n   variables: {\r\n    roomID: match.params.id,\r\n   },\r\n   document: MESSAGE,\r\n   updateQuery: (prev, {subscriptionData}) => {\r\n    const subMessage = subscriptionData.data.message;\r\n    const type = subscriptionData.data.message.actionType;\r\n    switch (type) {\r\n     case \"SEND\":\r\n      var updatedData = Object.assign({}, prev.getChatRoom, {\r\n       messages: prev.getChatRoom.messages.concat(subMessage),\r\n      }); // message type must be the same shape as prevmessagetype\r\n      break;\r\n     case \"DELETE\":\r\n      var initialData = prev.getChatRoom.messages.filter(\r\n       msg => msg._id != subMessage._id\r\n      );\r\n      var lastData = initialData.map(msg => {\r\n       if (msg.repliedMessage?._id == subMessage._id) {\r\n        return Object.assign({}, msg, {repliedMessage: null});\r\n       } else {\r\n        return msg;\r\n       }\r\n      });\r\n      var updatedData = Object.assign({}, prev.getChatRoom, {\r\n       messages: lastData,\r\n      });\r\n      break;\r\n     case \"UPDATE\":\r\n      setIsBeingUpdatedID(null);\r\n      var updatedData = Object.assign({}, prev.getChatRoom, {\r\n       messages: prev.getChatRoom.messages.map(msg => {\r\n        return msg._id == subMessage._id\r\n         ? Object.assign({}, msg, {\r\n            text: subMessage.text,\r\n            isEdited: subMessage.isEdited,\r\n           })\r\n         : msg;\r\n       }),\r\n      });\r\n      break;\r\n     default:\r\n      var updatedData = prev.getChatRoom;\r\n      break;\r\n    }\r\n\r\n    return {getChatRoom: updatedData};\r\n   },\r\n  });\r\n\r\n  subscribeToMore({\r\n   variables: {\r\n    roomID: match.params.id,\r\n   },\r\n   document: MEMBER_JOINED_ROOM,\r\n   updateQuery: (prev, {subscriptionData}) => {\r\n    const joinedMember = subscriptionData.data.room;\r\n    switch (joinedMember.actionType) {\r\n     case \"JOIN\":\r\n      var mergedData = Object.assign({}, prev.getChatRoom, {\r\n       members: prev.getChatRoom.members.concat(joinedMember.user),\r\n      });\r\n      break;\r\n     case \"LEAVE\":\r\n      var mergedData = Object.assign({}, prev.getChatRoom, {\r\n       members: prev.getChatRoom.members.filter(\r\n        m => m._id != joinedMember.user._id\r\n       ),\r\n      });\r\n      break;\r\n     default:\r\n      var mergedData = prev.getChatRoom;\r\n      break;\r\n    }\r\n    return {getChatRoom: mergedData};\r\n   },\r\n  });\r\n }, []);\r\n var chatText;\r\n return (\r\n  <GeneralWrapper>\r\n   <LeaveGroup onClick={onLeaveRoom}>\r\n    LEAVE THE ROOM{\" \"}\r\n    <i\r\n     style={{\r\n      fontSize: 14,\r\n      marginLeft: 4,\r\n     }}\r\n     className='fas fa-sign-out-alt'\r\n    ></i>\r\n   </LeaveGroup>\r\n\r\n   <Members>\r\n    <span\r\n     style={{\r\n      color: \"#ef4f4f\",\r\n      fontSize: 13,\r\n      fontWeight: \"600\",\r\n      letterSpacing: 1,\r\n     }}\r\n    >\r\n     GROUP MEMBERS\r\n     <span\r\n      style={{\r\n       marginLeft: 5,\r\n       fontWeight: 600,\r\n      }}\r\n     >\r\n      {data && (\r\n       <React.Fragment>\r\n        {\" \"}\r\n        {/* we need to use react fragment here to convert ( to string */}({\" \"}\r\n        {data.getChatRoom.members.length + \"/\" + data.getChatRoom.limit}\r\n        <i\r\n         style={{\r\n          fontSize: 10,\r\n          marginLeft: 2,\r\n         }}\r\n         className='fas fa-user'\r\n        />\r\n        )\r\n       </React.Fragment>\r\n      )}{\" \"}\r\n     </span>\r\n    </span>\r\n\r\n    <ul\r\n     style={{\r\n      padding: 0,\r\n      listStyle: \"none\",\r\n      width: \"100%\",\r\n      marginTop: 30,\r\n     }}\r\n    >\r\n     {data &&\r\n      data.getChatRoom.members.map((member, index) => {\r\n       return (\r\n        <li\r\n         style={{\r\n          padding: 5,\r\n          width: \"50%\",\r\n          display: \"flex\",\r\n          fontSize: 17.5,\r\n          alignItems: \"center\",\r\n         }}\r\n         key={member._id}\r\n        >\r\n         <i\r\n          className='fas fa-user'\r\n          style={{\r\n           color: memberColors[index],\r\n           fontSize: 15,\r\n          }}\r\n         />\r\n         <span\r\n          style={{\r\n           marginLeft: 10,\r\n           fontSize: 14,\r\n          }}\r\n         >\r\n          {\" \"}\r\n          {member.username}{\" \"}\r\n         </span>\r\n         {data.getChatRoom.host._id == member._id && (\r\n          <i\r\n           className='fas fa-crown'\r\n           style={{\r\n            color: \"#f0a500\",\r\n            fontSize: 11,\r\n            marginLeft: 4,\r\n           }}\r\n          />\r\n         )}{\" \"}\r\n        </li>\r\n       );\r\n      })}{\" \"}\r\n    </ul>\r\n   </Members>\r\n\r\n   <ChatBox>\r\n    {\" \"}\r\n    {loading ? (\r\n     \" Messages are loading....\"\r\n    ) : (\r\n     <Messages className='chatMessages'>\r\n      {data &&\r\n       data.getChatRoom.messages.map((msg, index) => {\r\n        return (\r\n         <InnerMessage\r\n          key={index}\r\n          checkOwner={msg.owner._id == currentUser._id}\r\n         >\r\n          {\" \"}\r\n          {/* row-reverse also reverses the end and start property */}\r\n          {msg.isEdited && (\r\n           <span\r\n            style={{\r\n             fontSize: 12,\r\n             color: \"grey\",\r\n            }}\r\n           >\r\n            {\" \"}\r\n            (edited){\" \"}\r\n           </span>\r\n          )}\r\n          <TextInformationBubble\r\n           memberColor={\r\n            memberColors[\r\n             data.getChatRoom.members.findIndex(m => m._id == msg.owner._id)\r\n            ] || \"#87A8A4\"\r\n           }\r\n          >\r\n           <span style={{fontSize: 12}}>\r\n            {\" \"}\r\n            <i className='fas fa-user' /> {msg.owner.username}{\" \"}\r\n           </span>\r\n           <span style={{color: \"#628395\"}}> {msg.date.split(\"-\")[0]} </span>\r\n          </TextInformationBubble>\r\n          {msg.repliedMessage && (\r\n           <RepliedMessageTextBubble>\r\n            <RepliedMessageInfo\r\n             color={\r\n              memberColors[\r\n               data?.getChatRoom.members.findIndex(\r\n                m => m._id == msg.repliedMessage.owner._id\r\n               )\r\n              ] || \"#87A8A4\"\r\n             }\r\n             style={{\r\n              top: 4,\r\n              left: 4,\r\n             }}\r\n            >\r\n             <span style={{marginRight: 3}}>\r\n              <i className='fas fa-user' style={{marginRight: 3}} />{\" \"}\r\n              {msg.repliedMessage.owner.username}{\" \"}\r\n             </span>\r\n\r\n             <span\r\n              style={{\r\n               marginLeft: 3,\r\n               color: \"#628395\",\r\n              }}\r\n             >\r\n              {msg.repliedMessage.date.split(\"-\")[0]}{\" \"}\r\n             </span>\r\n            </RepliedMessageInfo>\r\n            <span>{msg.repliedMessage.text}</span>\r\n           </RepliedMessageTextBubble>\r\n          )}\r\n          <TextBubble>\r\n           {\" \"}\r\n           {isBeingUpdatedID == msg._id ? (\r\n            <React.Fragment>\r\n             <UpdateText\r\n              onKeyDown={e => {\r\n               if (e.key == \"Enter\") {\r\n                onUpdateMessage(msg._id, e.target.value);\r\n               }\r\n               if (e.key == \"Escape\") {\r\n                setIsBeingUpdatedID(false);\r\n               }\r\n              }}\r\n              defaultValue={msg.text}\r\n             />\r\n             <span style={{fontSize: 10}}>\r\n              {\" \"}\r\n              çıkmak için esc • kaydetmek için enter{\" \"}\r\n             </span>\r\n            </React.Fragment>\r\n           ) : (\r\n            msg.text\r\n           )}{\" \"}\r\n          </TextBubble>\r\n          {msg.owner._id == currentUser._id ? (\r\n           <React.Fragment>\r\n            <EditTextBubble onClick={() => OnDeleteMessage(msg._id)}>\r\n             <i style={{color: \"#ec4646\"}} className='fas fa-trash-alt'></i>\r\n            </EditTextBubble>\r\n            <EditTextBubble onClick={() => setIsBeingUpdatedID(msg._id)}>\r\n             <i style={{color: \"#ec4646\"}} className='fas fa-edit'></i>\r\n            </EditTextBubble>\r\n            <EditTextBubble onClick={() => setIsReplied(msg)}>\r\n             <i style={{color: \"#ec4646\"}} className='fas fa-reply'></i>\r\n            </EditTextBubble>\r\n           </React.Fragment>\r\n          ) : (\r\n           <EditTextBubble onClick={() => setIsReplied(msg)}>\r\n            <i style={{color: \"#ec4646\"}} className='fas fa-reply'></i>\r\n           </EditTextBubble>\r\n          )}{\" \"}\r\n         </InnerMessage>\r\n        );\r\n       })}{\" \"}\r\n     </Messages>\r\n    )}\r\n    <ReplyWrapper isReplied={isReplied}>\r\n     <RepliedMessageInfo2\r\n      color={\r\n       memberColors[\r\n        data?.getChatRoom.members.findIndex(m => m._id == isReplied?.owner._id)\r\n       ] || \"#87A8A4\"\r\n      }\r\n     >\r\n      <i className='fas fa-user' />\r\n      <span style={{marginLeft: 4}}>{isReplied?.owner.username}</span>\r\n      <span\r\n       style={{\r\n        marginLeft: 8,\r\n        color: \"#628395\",\r\n       }}\r\n      >\r\n       {isReplied?.date.split(\"-\")[0]}{\" \"}\r\n      </span>\r\n     </RepliedMessageInfo2>\r\n     <ReplyText>{isReplied?.text}</ReplyText>\r\n     <ReplyCloseIcon onClick={() => setIsReplied(null)}>\r\n      <i className='fas fa-times'></i>\r\n     </ReplyCloseIcon>\r\n    </ReplyWrapper>\r\n    <TextPart>\r\n     <ChatTextInput\r\n      ref={ref => (chatText = ref)}\r\n      onKeyDown={e => {\r\n       if (e.key == \"Enter\") {\r\n        // we can use onKeyDown event to handle keyboard actions !\r\n        OnSendMessage();\r\n        e.target.value = \"\";\r\n       }\r\n      }}\r\n      maxLength='100'\r\n     />\r\n     <Send onClick={OnSendMessage}>\r\n      {\" \"}\r\n      {Loading ? <img src='/spin.gif' width='30' /> : \"SEND\"}{\" \"}\r\n     </Send>\r\n    </TextPart>\r\n   </ChatBox>\r\n  </GeneralWrapper>\r\n );\r\n};\r\n\r\nexport default Room;\r\n","import React, {useEffect, useState, useRef} from \"react\";\r\nimport {useLazyQuery} from \"@apollo/client\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {CHECK_TOKEN_QUERY} from \"../GraphqQL/Queries/AccountQuery\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Route} from \"react-router-dom\";\r\n\r\nconst usePrevious = value => {\r\n const ref = useRef();\r\n useEffect(() => {\r\n  ref.current = value;\r\n });\r\n return ref.current;\r\n};\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n let history = useHistory();\r\n let dispatch = useDispatch();\r\n let [loadingC, setLoadingC] = useState(true);\r\n let prevPath = usePrevious(rest.path);\r\n let currentPath = rest.path;\r\n let [check, {data}] = useLazyQuery(CHECK_TOKEN_QUERY, {\r\n  context: {\r\n   history,\r\n  },\r\n  notifyOnNetworkStatusChange: true,\r\n  fetchPolicy: \"network-only\",\r\n\r\n  onCompleted: ({checkToken}) => {\r\n   setLoadingC(false);\r\n   dispatch({\r\n    type: \"SET_USER\",\r\n    payload: checkToken,\r\n   });\r\n  },\r\n });\r\n\r\n useEffect(() => {\r\n  check(); // we always get the new fresh user data\r\n }, [currentPath]); // fetching users when user routes via browser routing\r\n\r\n return (\r\n  <Route\r\n   {...rest}\r\n   component={props =>\r\n    !loadingC && data && prevPath == currentPath ? (\r\n     <Component {...props} />\r\n    ) : null\r\n   }\r\n  />\r\n );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore} from \"redux\";\r\nimport {Route, Redirect, BrowserRouter, Switch} from \"react-router-dom\";\r\nimport {\r\n ApolloProvider,\r\n ApolloClient,\r\n InMemoryCache,\r\n ApolloLink,\r\n HttpLink,\r\n from,\r\n split,\r\n} from \"@apollo/client\";\r\n\r\nimport {onError} from \"apollo-link-error\";\r\nimport Login from \"./Chat-App/Containers/login\";\r\nimport Register from \"./Chat-App/Containers/register\";\r\nimport UserReducer from \"./Chat-App/Reducers/userReducer\";\r\nimport MainPage from \"./Chat-App/Containers/home/main-page\";\r\nimport Room from \"./Chat-App/Containers/home/room\";\r\nimport PrivateRoute from \"./Chat-App/Containers/privateRoute\";\r\nimport {logout} from \"./Chat-App/Actions/action\";\r\nimport {WebSocketLink} from \"@apollo/client/link/ws\";\r\nimport {getMainDefinition} from \"@apollo/client/utilities\";\r\n\r\nconst httpTerminatingLink = new HttpLink({\r\n //uri: \"http://localhost:8000/graphql\",\r\n uri: \"https://groupchattappp.herokuapp.com/graphql\",\r\n});\r\n//\r\nconst wsLink = new WebSocketLink({\r\n //uri: \"ws://localhost:8000/subscriptions\",\r\n uri: \"wss://groupchattappp.herokuapp.com/subscriptions\",\r\n options: {\r\n  reconnect: true,\r\n  connectionParams: {\r\n   token: localStorage.getItem(\"token\"),\r\n   roomID:\r\n    window.location.pathname.split(\"/\")[\r\n     window.location.pathname.split(\"/\").length - 1\r\n    ],\r\n  },\r\n  timeout: 60000,\r\n },\r\n});\r\n\r\nconst initalState = {\r\n user: {},\r\n error: {},\r\n};\r\n\r\nconst store = createStore(UserReducer, initalState);\r\n\r\nconst splitLink = split(\r\n ({query}) => {\r\n  const definition = getMainDefinition(query);\r\n  return (\r\n   definition.kind === \"OperationDefinition\" &&\r\n   definition.operation === \"subscription\"\r\n  );\r\n },\r\n wsLink,\r\n httpTerminatingLink\r\n);\r\n\r\nconst errorLink = onError(({graphQLErrors, networkError, operation}) => {\r\n // only runs when server respones\r\n\r\n let errorType, message;\r\n if (graphQLErrors) {\r\n  for (const el of graphQLErrors) {\r\n   switch (el.extensions.code) {\r\n    case \"UNAUTHENTICATED\":\r\n     store.dispatch(logout());\r\n     window.location.href = \"/login\";\r\n     break;\r\n    default:\r\n     break;\r\n   }\r\n   errorType = `[${el.extensions.code}]`;\r\n   message = message || el.message;\r\n  }\r\n\r\n  store.dispatch({\r\n   type: \"SET_ERROR\",\r\n   payload: {\r\n    errorType,\r\n    message,\r\n   },\r\n  });\r\n }\r\n\r\n if (networkError) {\r\n  console.log(graphQLErrors);\r\n }\r\n});\r\n\r\nconst middleWareLink = new ApolloLink((operation, forward) => {\r\n const token = localStorage.getItem(\"token\");\r\n\r\n operation.setContext({\r\n  headers: {\r\n   ...operation.getContext().headers,\r\n   authorization: token ? `Bearer ${token}` : \"\",\r\n  },\r\n });\r\n\r\n return forward(operation);\r\n});\r\n//\r\nexport const client = new ApolloClient({\r\n link: from([middleWareLink, errorLink, splitLink]),\r\n cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n return (\r\n  <ApolloProvider client={client}>\r\n   <BrowserRouter>\r\n    <Provider store={store}>\r\n     <Switch>\r\n      <Route path='/' component={() => <Redirect to='/login' />} exact />\r\n      <Route path='/login' component={Login} />{\" \"}\r\n      <Route path='/register' component={Register} />{\" \"}\r\n      <PrivateRoute path='/main-page' component={MainPage} exact />\r\n      <PrivateRoute path='/room/:id' component={Room} exact />\r\n     </Switch>{\" \"}\r\n    </Provider>{\" \"}\r\n   </BrowserRouter>{\" \"}\r\n  </ApolloProvider>\r\n );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}
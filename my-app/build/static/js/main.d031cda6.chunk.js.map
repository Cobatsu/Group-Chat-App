{"version":3,"sources":["logo.svg","Chat-App/GraphqQL/Queries/AccountQuery.js","Chat-App/Containers/title-image.js","Chat-App/Containers/login.js","Chat-App/GraphqQL/Mutations/AccountMutation.js","Chat-App/Containers/register.js","Chat-App/Reducers/userReducer.js","Chat-App/GraphqQL/Queries/ChatRoomQuery.js","Chat-App/GraphqQL/Mutations/CatchRoomMutation.js","Chat-App/Containers/components/roomComp.js","Chat-App/Containers/home/userRooms.js","Chat-App/Containers/home/otherrooms.js","Chat-App/Actions/action.js","Chat-App/Containers/home/main-page.js","Chat-App/Containers/home/room.js","Chat-App/Containers/privateRoute.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_QUERY","gql","CHECK_TOKEN_QUERY","TitleImage","text","GeneralWrapper","styled","div","InputBox","input","LoginPage","props","userNameRef","passwordRef","dispatch","useDispatch","errorState","useSelector","state","error","history","useHistory","location","useLocation","username","queryString","parse","search","slice","useLazyQuery","onCompleted","loginUser","localStorage","setItem","jwt","type","payload","push","login","loading","style","color","errorType","message","placeholder","ref","value","onClick","variables","user","password","to","pathname","textDecoration","fontSize","margin","REGISTER_MUTATION","RegisterPage","email","useMutation","registerUser","onError","console","log","register","data","UserReducer","action","GET_USER_ROOMS_QUERY","GET_OTHER_ROOMS_QUERY","GET_CHAT_ROOM_QUERY","CREATE_ROOM_MUTATION","JOIN_ROOM_MUTATION","LEAVE_ROOM_MUTATION","MEMBER_JOINED_ROOM","SEND_MESSAGE_MUTATION","DELETE_MESSAGE_MUTATION","UPDATE_MESSAGE_MUTATION","MESSAGE","InnerRooms","Room","room","joinRoom","userRoom","useState","members","setMembers","useSubscription","roomID","_id","onSubscriptionData","subscriptionData","actionType","prev","concat","filter","u","limit","length","display","alignItems","justifyContent","flex","marginRight","className","title","host","Container","Rooms","UserRooms","timeToRefetch","setTimeToRefetch","useQuery","fetchPolicy","notifyOnNetworkStatusChange","refetch","join","storeError","useEffect","then","id","memberLength","e","textAlign","getUserRooms","map","Refresh","OtherRooms","position","getOtherRooms","logout","removeItem","client","clearStore","InnerDiv","LogOut","UserInformation","Innerbuttons","Profile","TextSpan","span","Button","button","InnerInputWrapper","MainPage","currentUser","create","Fragment","src","width","marginBottom","marginTop","Array","fill","_","index","toLowerCase","parseInt","ChatBox","Members","TextPart","ChatTextInput","Send","Messages","ul","EditTextBubble","InnerMessage","li","checkOwner","TextBubble","TextInformationBubble","memberColor","LeaveGroup","UpdateText","ReplyWrapper","isReplied","ReplyText","RepliedMessageInfo","ReplyCloseIcon","RepliedMessageTextBubble","memberColors","chatText","match","params","subscribeToMore","isBeingUpdatedID","setIsBeingUpdatedID","setIsReplied","send","Loading","deleteMessage","updateMessage","leaveRoom","OnSendMessage","repliedMessage","onLeaveRoom","document","updateQuery","subMessage","setTimeout","querySelector","scrollTo","updatedData","Object","assign","getChatRoom","messages","msg","joinedMember","mergedData","m","marginLeft","fontWeight","letterSpacing","padding","listStyle","member","owner","findIndex","date","top","left","onKeyDown","ID","key","target","messageID","updatedText","defaultValue","class","maxLength","PrivateRoute","Component","component","rest","context","checkToken","check","httpTerminatingLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","token","getItem","store","createStore","splitLink","split","query","definition","getMainDefinition","kind","operation","errorLink","graphQLErrors","networkError","getContext","el","extensions","code","middleWareLink","ApolloLink","forward","setContext","headers","authorization","ApolloClient","link","from","cache","InMemoryCache","App","exact","path","Login","Register","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iSAAe,I,kFCEFA,GAAcC,eAAH,uMAcXC,GAAoBD,eAAH,wJ,QCdjBE,GAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAa,oCAAOA,EAAP,Q,oBCQjCC,GAAiBC,KAAOC,IAAV,gJAWdC,GAAWF,KAAOG,MAAV,+CA+ECC,GA5EG,SAAEC,GAEhB,IAQIC,EAAcC,EARZC,EAAWC,eACXC,EAAaC,cAAa,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAMC,SAClDC,EAAUC,eAEVC,EAAWC,eAETC,EAAaC,KAAYC,MAAMJ,EAASK,OAAOC,MAAM,IAArDJ,SARiB,EAYgBK,wBAAa7B,GAAc,CAEhE8B,YAAY,YAAkB,IAAfC,EAAc,EAAdA,UAEXC,aAAaC,QAAQ,QAAQF,EAAUG,KAEvCpB,EAAS,CACLqB,KAAK,WACLC,QAAQL,IAGZX,EAAQiB,KAAK,iBAvBI,oBAYjBC,EAZiB,YAYNC,EAZM,EAYNA,QAAUpB,EAZJ,EAYIA,MA8B7B,OAAO,gBAACd,GAAD,WAEH,eAAC,GAAD,CAAYD,KAAO,gCAEjBoB,EAAW,qBAAIgB,MAAO,CACpBC,MAAM,SADG,8CAE8B,KAEzCF,EAAU,mEACVpB,EAAU,sBAAIqB,MAAO,CACjBC,MAAM,OADA,cAEJzB,EAAW0B,UAAY,IAAM1B,EAAW2B,QAFpC,OAEsD,KAGlE,eAACnC,GAAD,CAAUoC,YAAY,WAAWC,IAAM,SAAAA,GAAG,OAAIjC,EAAciC,GAAMC,MAAQtB,IAE1E,eAAChB,GAAD,CAAUoC,YAAY,WAAWC,IAAM,SAAAA,GAAG,OAAIhC,EAAcgC,GAAMV,KAAK,aAEvE,yBAAQY,QAAU,WA7BlBT,EAAM,CACFU,UAAU,CACNC,KAAK,CACDzB,SAASZ,EAAYkC,OAAS,KAC9BI,SAASrC,EAAYiC,OAAS,UAyB1C,sBAEA,eAAC,KAAD,CAAMK,GAAI,CACNC,SAAS,aACVZ,MAAO,CACNa,eAAe,OACfC,SAAS,GACTC,OAAO,GALX,oCCpFKC,GAAoBvD,eAAH,mKCMxBI,GAAiBC,KAAOC,IAAV,gJAWdC,GAAWF,KAAOG,MAAV,+CAgECgD,GA9DM,SAAE9C,GAEnB,IAeIC,EAAcC,EAAc6C,EAf1BtC,EAAUC,eACVL,EAAaC,cAAa,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAMC,SAH5B,EAKsBwC,uBAAYH,GAAoB,CAE1E1B,YAAY,YAAuB,IAAnB8B,EAAkB,EAAlBA,aAEZxC,EAAQiB,KAAR,2BAAiCuB,EAAapC,YAIlDqC,QAAQ,SAAC1C,GAAU2C,QAAQC,IAAI5C,MAbX,oBAKpB6C,EALoB,YAKAzB,GALA,EAKP0B,KALO,EAKA1B,SAAUpB,EALV,EAKUA,MA6BtC,OAAO,gBAAC,GAAD,WAEP,eAAC,GAAD,CAAYf,KAAO,+BAEbmC,EAAU,mDAA4B,KAEtCpB,EAAQ,sBAAIqB,MAAO,CAAEC,MAAM,OAAnB,cAAgCzB,EAAW0B,UAAY,IAAM1B,EAAW2B,QAAxE,OAA0F,KAEpG,eAAC,GAAD,CAAUC,YAAY,WAAWC,IAAM,SAAAA,GAAG,OAAIjC,EAAciC,KAE5D,eAAC,GAAD,CAAUD,YAAY,QAAQC,IAAM,SAAAA,GAAG,OAAIa,EAAQb,KAEnD,eAAC,GAAD,CAAUD,YAAY,WAAWC,IAAM,SAAAA,GAAG,OAAIhC,EAAcgC,GAAMV,KAAK,aAEvE,yBAAQY,QAAU,WA3BlBiB,EAAS,CAELhB,UAAU,CACNC,KAAK,CACDzB,SAASZ,EAAYkC,OAAS,KAC9BY,MAAMA,EAAMZ,OAAS,KACrBI,SAASrC,EAAYiC,OAAS,UAqB1C,wBAEA,eAAC,KAAD,CAAMK,GAAI,CACNC,SAAS,UACTZ,MAAQ,CACPa,eAAe,OACfC,SAAS,GACTC,OAAO,GALZ,iCC/BOW,GArCK,SAAEhD,EAAQiD,GAG1B,OAAQA,EAAOhC,MAEX,IAAK,WAED,OAAO,6BACAjB,GADP,IAEI+B,KAAKkB,EAAO/B,UAGpB,IAAK,YAED,OAAO,6BACAlB,GADP,IAEKC,MAAMgD,EAAO/B,UAItB,IAAK,SAED,OAAO,gBACA+B,EAAO/B,SAGlB,QAEI,OAAOlB,IC7BNkD,GAAuBnE,eAAH,+OAkBpBoE,GAAwBpE,eAAH,+UAuBrBqE,GAAsBrE,eAAH,iuBCzCnBsE,GAAuBtE,eAAH,+KAapBuE,GAAqBvE,eAAH,uPAUlBwE,GAAsBxE,eAAH,6KAiBnByE,GAAqBzE,eAAH,2RAiBlB0E,GAAwB1E,eAAH,iPAWrB2E,GAA0B3E,eAAH,8MAUvB4E,GAA0B5E,eAAH,iQAcvB6E,GAAU7E,eAAH,uSCzFd8E,GAAazE,KAAOC,IAAV,mNAWHyE,GAAO,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EAEpBC,oBAASH,EAAKI,SAFM,oBAE3CA,EAF2C,KAElCC,EAFkC,KAGjCC,2BACbb,GACA,CACI1B,UAAW,CAAEwC,OAAQP,EAAKQ,KAC1BC,mBAAoB,YAA2B,IAAxBC,EAAuB,EAAvBA,iBAC0B,QAAzCA,EAAiB1B,KAAKgB,KAAKW,WAC3BN,GAAW,SAAAO,GAAI,OAAIA,EAAKC,OAAOH,EAAiB1B,KAAKgB,KAAKhC,SAEZ,SAAzC0C,EAAiB1B,KAAKgB,KAAKW,YAChCN,GAAW,SAAAO,GAAI,OAAIA,EAAKE,QAAO,SAACC,GAAD,OAAOL,EAAiB1B,KAAKgB,KAAKhC,KAAKwC,KAAOO,EAAEP,aATvFxB,KAeR,OAAO,gBAACc,GAAD,CAA2BhC,QAASmC,EAASD,EAAKQ,IAAKR,EAAKgB,MAAOZ,EAAQa,QAA3E,UACH,wBAAM1D,MAAO,CAAE2D,QAAS,OAAQC,WAAY,SAAUC,eAAgB,aAAcC,KAAM,GAA1F,UACI,oBAAG9D,MAAO,CAAE+D,YAAa,EAAG9D,MAAO0C,EAAW,UAAY,WAAaqB,UAAU,mBAChFvB,EAAKwB,MAAMP,OAAS,GAAKjB,EAAKwB,MAAM7E,MAAM,EAAG,GAAK,MAAQqD,EAAKwB,UAG/DtB,GAAY,wBAAM3C,MAAO,CAAE2D,QAAS,OAAQC,WAAY,SAAUC,eAAgB,aAAcC,KAAM,GAA1F,UACT,oBAAG9D,MAAO,CAAE+D,YAAa,EAAG9D,MAAO,WAAa+D,UAAU,gBACzDvB,EAAKyB,KAAKlF,SAFF,OAIjB,wBAAMgB,MAAO,CACT2D,QAAS,OAAQC,WAAY,SAC7B3D,MAAO4C,EAAQa,SAAWjB,EAAKgB,MAAQ,MAAQ,UAC7CI,eAAgB,gBAAiBC,KAAM,IAH7C,UAKI,oBAAG9D,MAAO,CAAE+D,YAAa,EAAG9D,MAAO0C,EAAW,UAAY,WAAaqB,UAAU,wBAChFnB,EAAQa,OAAS,IAAMjB,EAAKgB,WAhBbhB,EAAKQ,MCzB3BkB,GAAYrG,KAAOC,IAAV,+PAYTqG,GAAQtG,KAAOC,IAAV,qHAgHIsG,IAvGIvG,KAAOC,IAAV,+PAcE,SAAC,GAAyC,IAAtCuG,EAAqC,EAArCA,cAAgBC,EAAqB,EAArBA,iBAAqB,EAELC,oBAAS5C,GAAsB,CACrE6C,YAAY,eACZC,6BAA4B,IAF5BjD,EAF2C,EAE3CA,KAAO1B,EAFoC,EAEpCA,QAAUpB,EAF0B,EAE1BA,MAAQgG,EAFkB,EAElBA,QAK3B/F,EAAUC,eAPmC,EASjCsC,uBAAYa,GAAqB,CAE3CX,QAAQ,SAAC1C,GAAD,OAAU2C,QAAQC,IAAI5C,IAE9BW,YAAY,YAAe,IAAboD,EAAY,EAAZA,SAEN9D,EAAQiB,KAAK,SAAS6C,EAASO,QANvC2B,EAT2C,qBAsB7CC,EAAapG,cAAa,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAMC,SAExDmG,sBAAU,WAECR,GAEKK,IAAUI,MAAK,WAEPR,GAAiB,QAMvC,CAACD,IAGH,IAAM5B,EAAW,SAACsC,EAAGvB,EAAMwB,GAAV,OAAyB,SAACC,GAEnCN,EAAK,CAEDpE,UAAU,CACNwC,OAAOgC,EACPvB,QACAwB,oBAQhB,OAEQ,gBAACd,GAAD,WAEQ,uBAAMnE,MAAO,CAACmF,UAAU,UAAxB,wBAEA,eAACf,GAAD,UAGQrE,EAAU,kDACVpB,EAAU,sCAAQkG,EAAW3E,UAAY,IAAM2E,EAAW1E,QAAhD,OAEVsB,EAAK2D,aAAaC,KAAI,SAAC5C,GAEf,OAEQ,eAAC,GAAD,CAEAA,KAAMA,EACNC,SAAUA,EACVC,UAAU,GAHLF,EAAKQ,eC1GpDkB,GAAYrG,KAAOC,IAAV,qQAWTqG,GAAQtG,KAAOC,IAAV,iHAQLuH,GAAUxH,KAAOC,IAAV,iGAuDEwH,GA/CI,WAAK,IAAD,EAE8Bf,oBAAS3C,GAAuB,CACtE4C,YAAY,iBADXhD,EAFO,EAEPA,KAAO1B,EAFA,EAEAA,QAAUpB,EAFV,EAEUA,MAAQgG,EAFlB,EAEkBA,QAG3B/F,EAAUC,eALD,EAMGsC,uBAAYa,GAAqB,CAC3CX,QAAQ,SAAC1C,GAAD,OAAU2C,QAAQC,IAAI5C,IAC9BW,YAAY,YAAe,IAAboD,EAAY,EAAZA,SACN9D,EAAQiB,KAAK,SAAS6C,EAASO,QAHvC2B,EANO,qBAYTC,EAAapG,cAAa,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAMC,SAClD+D,EAAW,SAACsC,EAAGvB,EAAMwB,GAAV,OAAyB,SAACC,GACnCN,EAAK,CACDpE,UAAU,CACNwC,OAAOgC,EACPvB,QACAwB,oBAKhB,OAEQ,gBAAC,GAAD,WACQ,wBAAMjF,MAAO,CAACmF,UAAU,SAASK,SAAS,YAA1C,wBAEQ,eAACF,GAAD,CAAS/E,QAAS,kBAAIoE,KAAWX,UAAU,mBAEnD,eAAC,GAAD,UAEQjE,EAAU,kDACVpB,EAAU,sCAAQkG,EAAW3E,UAAY,IAAM2E,EAAW1E,QAAhD,OACVsB,EAAKgE,cAAcJ,KAAI,SAAC5C,GAChB,OAAO,eAAC,GAAD,CAECA,KAAMA,EACNC,SAAUA,GAFLD,EAAKQ,cCtE7CyC,GAAS,WAKd,OAHAlG,aAAamG,WAAW,SACxBC,GAAOC,aAEA,CACJlG,KAAK,SACLC,QAAQ,CACJa,KAAK,GACL9B,MAAM,MCDfd,GAAiBC,KAAOC,IAAV,kKASd+H,GAAWhI,KAAOC,IAAV,6RAYRgI,GAASjI,KAAOC,IAAV,qYAmBNiI,GAAkBlI,KAAOC,IAAV,yHAMfkI,GAAenI,KAAOC,IAAV,8IASZmI,GAAUpI,KAAOC,IAAV,iQAWPoI,GAAWrI,KAAOsI,KAAV,mEAIRC,GAASvI,KAAOwI,OAAV,iVAYNC,GAAoBzI,KAAOC,IAAV,uHA4HRyI,GAlHE,SAAErI,GAEf,IAWIsF,EAAQQ,EAXNwC,EAAchI,cAAY,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAM+B,MAAQ,MAFxC,EAIiBU,uBAAYY,GAAuB,CACxEV,QAAQ,SAAC1C,GAAU2C,QAAQC,IAAI5C,MALX,oBAIhB+H,EAJgB,YAIK/H,GAJL,EAILoB,QAJK,EAIKpB,OAIvBL,EAAWC,eACXK,EAAUC,eACVgG,EAAapG,cAAa,eAAEC,EAAF,uDAAU,GAAV,OAAkBA,EAAMC,SAVhC,EAWqBiE,qBAAS,GAX9B,oBAWhB0B,EAXgB,KAWAC,EAXA,KAsCxB,OAAS,gBAAC,KAAMoC,SAAP,WAEDhI,GAAUkG,EAAW3E,UAAY,IAAM2E,EAAW1E,QAEtD,gBAAC,GAAD,WAEC,eAAC4F,GAAD,CAAQxF,QA7BI,WAEbf,aAAamG,WAAW,SACxBrH,EAAUoH,MACV9G,EAAQiB,KAAK,WAyBZ,qBAIA,gBAACqG,GAAD,WAEG,sBAAKU,IAAI,eAAeC,MAAM,MAAM7G,MAAO,CAAC8G,aAAa,GAAKC,UAAU,MAExE,gBAACf,GAAD,WAEM,gBAACG,GAAD,0BAAuBM,EAAYzH,SAAnC,OACA,gBAACmH,GAAD,uBAAoBM,EAAYvF,MAAhC,UAKN,eAAC+E,GAAD,UAEQ,gBAACM,GAAD,WAEY,uBAAKvG,MAAO,CAAC2D,QAAQ,OAAQE,eAAe,gBAAgBgD,MAAM,QAAlE,UAEI,6CACA,wBAAOxG,IAAK,SAAAA,GAAG,OAAE4D,EAAM5D,GAAKL,MAAO,CAAC6G,MAAM,OAAQzG,YAAY,aAIlE,uBAAKJ,MAAO,CAAC2D,QAAQ,OAAQoD,UAAU,EAAGlD,eAAe,gBAAgBgD,MAAM,QAA/E,UAEI,iDAEA,yBAAQ7G,MAAO,CAAC6G,MAAM,SAAUxG,IAAK,SAAAA,GAAG,OAAEoD,EAAMpD,GAAhD,SAEgB2G,MAAM,IAAIC,OAAO5B,KAAI,SAAC6B,EAAEC,GAAH,OAAY,wCAAuBA,EAAM,EAA7B,MAAaA,WAMlE,gBAACd,GAAD,CAAQ9F,QA5DjB,WAEfmG,EAAO,CACHlG,UAAU,CACNiC,KAAK,CACDwB,MAAOA,EAAM3D,MAAM8G,eAAiB,KACpC3D,MAAO4D,SAAU5D,EAAMnD,QAAW,SAG3CyE,MAAK,WACIR,GAAiB,OAkDL,4BAA4C,oBAAGP,UAAU,gBAAzD,eAiBvB,gBAAC8B,GAAD,WAES,eAAC,GAAD,CAAWxB,cAAiBA,EAAgBC,iBAAoBA,IAChE,eAAC,GAAD,cC7LZ1G,GAAiBC,KAAOC,IAAV,6LAWduJ,GAAUxJ,KAAOC,IAAV,oaAgBPwJ,GAAUzJ,KAAOC,IAAV,yWAgBPyJ,GAAW1J,KAAOC,IAAV,qHAOR0J,GAAgB3J,KAAOG,MAAV,gMAabyJ,GAAO5J,KAAOwI,OAAV,yJAWJqB,GAAW7J,KAAO8J,GAAV,iLAYRC,GAAiB/J,KAAOC,IAAV,0IAUd+J,GAAehK,KAAOiK,GAAV,0XAKC,qBAAEC,WAA4B,MAAQ,gBAS9CH,IACG,qBAAEG,WAA4B,UAAY,mBAOlDC,GAAanK,KAAOC,IAAV,2KAUVmK,GAAwBpK,KAAOsI,KAAV,iKAOnB,qBAAE+B,eAIJC,GAAatK,KAAOwI,OAAV,kQAgBV+B,GAAavK,KAAOG,MAAV,gLAUVqK,GAAexK,KAAOC,IAAV,2UAWD,qBAAEwK,UAAuB,OAAO,SAE3CC,GAAY1K,KAAOC,IAAV,sTAYT0K,GAAqB3K,KAAOC,IAAV,2IAER,qBAAEkC,SAKZyI,GAAiB5K,KAAOC,IAAV,oIAQd4K,GAA2B7K,KAAOC,IAAV,0YAuBxB6K,GAAe,CAAE,WAAY,UAAW,WAAY,gBAAiB,WAAY,UAAW,aAAc,SAAW,SAAW,eAkSvHpG,GAhSF,SAAC,GAAW,IAsIjBqG,EAtIOC,EAAS,EAATA,MAAS,EACiCtE,oBAAS1C,GAAoB,CAC9EtB,UAAU,CACNwC,OAAO8F,EAAMC,OAAO/D,MAFpBvD,EADY,EACZA,KAAO1B,EADK,EACLA,QAAkBiJ,GADb,EACKrK,MADL,EACaqK,iBAI3BpK,EAAUC,eALI,EAM2B+D,qBAAS,GANpC,oBAMbqG,EANa,KAMIC,EANJ,OAOatG,sBAPb,oBAOb2F,EAPa,KAOHY,EAPG,OAQmBhI,uBAAYgB,IAR/B,oBAQZiH,EARY,KAQKC,EARL,KAQHtJ,QARG,EASMoB,uBAAYiB,IAA9BkH,EATY,uBAUMnI,uBAAYkB,IAA9BkH,EAVY,uBAWEpI,uBAAYc,GAAsB,CACpD3C,YAAY,SAACmC,GACT7C,EAAQiB,KAAK,iBAFb2J,EAXY,qBAgBd/C,EAAchI,cAAY,eAACC,EAAD,uDAAS,GAAT,OAAgBA,EAAM+B,QAChDgJ,EAAgB,WACfZ,EAASvI,OACR8I,EAAK,CACD5I,UAAU,CACF5C,KAAKiL,EAASvI,OAAS,KACvB0C,OAAO8F,EAAMC,OAAO/D,IAAM,KAC1B0E,eAAc,OAACnB,QAAD,IAACA,OAAD,EAACA,EAAWtF,QAKxC0G,EAAc,WAChBH,EAAU,CACNhJ,UAAU,CACNwC,OAAO8F,EAAMC,OAAO/D,OA0GhC,OApFAF,sBAAU,WACN,OAAO,WACH6E,OAEN,IAEFrI,QAAQC,IAAIE,GAEZqD,sBAAU,WACNkE,EAAgB,CACZxI,UAAU,CACNwC,OAAO8F,EAAMC,OAAO/D,IAExB4E,SAAStH,GACTuH,YAAY,SAACxG,EAAD,GAA+B,IAAtBF,EAAqB,EAArBA,iBACX2G,EAAa3G,EAAiB1B,KAAKtB,QACnCR,EAAOwD,EAAiB1B,KAAKtB,QAAQiD,WAE3C,OADA9B,QAAQC,IAAI4B,GACLxD,GACH,IAAK,OACDoK,YAAW,WAAiBH,SAASI,cAAc,iBAAuBC,SAAS,EAAG,OAAS,GAC/F,IAAIC,EAAcC,OAAOC,OAAO,GAAG/G,EAAKgH,YAAY,CAChDC,SAASjH,EAAKgH,YAAYC,SAAShH,OAAOwG,KAElD,MACA,IAAK,SACGI,EAAcC,OAAOC,OAAO,GAAG/G,EAAKgH,YAAY,CAChDC,SAASjH,EAAKgH,YAAYC,SAAS/G,QAAO,SAACgH,GAAD,OAAQA,EAAItH,KAAO6G,EAAW7G,SAEhF,MACA,IAAK,SACDiG,EAAoB,MAChBgB,EAAcC,OAAOC,OAAO,GAAG/G,EAAKgH,YAAY,CAChDC,SAASjH,EAAKgH,YAAYC,SAASjF,KACnC,SAACkF,GACG,OAAOA,EAAItH,KAAO6G,EAAW7G,IAAOkH,OAAOC,OAAO,GAAGG,EAAI,CAAC3M,KAAKkM,EAAWlM,OAAS2M,OAE/F,MACA,QACQL,EAAc7G,EAAKgH,YAI/B,MAAO,CACHA,YAAYH,MAMxBlB,EAAgB,CACZxI,UAAU,CACNwC,OAAO8F,EAAMC,OAAO/D,IAExB4E,SAAS1H,GACT2H,YAAY,SAACxG,EAAD,GAA4B,IAC9BmH,EAD6B,EAApBrH,iBACuB1B,KAAKgB,KAC3C,OAAO+H,EAAapH,YACjB,IAAK,OACA,IAAIqH,EAAaN,OAAOC,OAAO,GAAG/G,EAAKgH,YAAY,CAC/CxH,QAAQQ,EAAKgH,YAAYxH,QAAQS,OAAOkH,EAAa/J,QAE9D,MACA,IAAK,QACIgK,EAAaN,OAAOC,OAAO,GAAG/G,EAAKgH,YAAY,CAC/CxH,QAAQQ,EAAKgH,YAAYxH,QAAQU,QAAO,SAACmH,GAAD,OAAMA,EAAEzH,KAAOuH,EAAa/J,KAAKwC,SAElF,MACA,QACUwH,EAAapH,EAAKgH,YAG/B,MAAO,CACHA,YAAYI,QAM1B,IAKK,gBAAC,GAAD,WAEC,gBAACrC,GAAD,CAAY7H,QAASoJ,EAArB,6BAEqB,oBAAG3J,MAAO,CAACc,SAAS,GAAK6J,WAAW,GAAI3G,UAAU,2BAIvE,gBAACuD,GAAD,WACI,wBAAMvH,MAAO,CAACC,MAAM,UAAUa,SAAS,GAAG8J,WAAW,MAAMC,cAAc,GAAzE,0BAEI,uBAAM7K,MAAO,CAAC2K,WAAW,EAAGC,WAAW,KAAvC,SACMnJ,GACE,gBAAC,KAAMkF,SAAP,mBAGclF,EAAK4I,YAAYxH,QAAQa,OAAS,IAAQjC,EAAK4I,YAAY5G,MAGjE,oBAAGzD,MAAO,CAACc,SAAS,GAAG6J,WAAW,GAAI3G,UAAU,gBANxD,YAYZ,qBAAIhE,MAAO,CAAE8K,QAAQ,EAAEC,UAAU,OAASlE,MAAM,OAASE,UAAU,IAAnE,SAGQtF,GAAQA,EAAK4I,YAAYxH,QAAQwC,KAAI,SAAC2F,EAAO7D,GACzC,OACA,sBAAInH,MAAO,CAAC8K,QAAQ,EAAEjE,MAAM,MAAMlD,QAAQ,OAAO7C,SAAS,KAAK8C,WAAW,UAA1E,UACI,oBAAGI,UAAU,cAAchE,MAAO,CAACC,MAAM2I,GAAazB,GAAOrG,SAAS,MACtE,wBAAMd,MAAO,CAAC2K,WAAW,GAAG7J,SAAS,IAArC,cAA4CkK,EAAOhM,SAAnD,OAEGyC,EAAK4I,YAAYnG,KAAKjB,KAAO+H,EAAO/H,KAAQ,oBAAGe,UAAU,eAAehE,MAAO,CAACC,MAAM,UAAUa,SAAS,GAAG6J,WAAW,OAJpCK,EAAO/H,aAajH,gBAACqE,GAAD,WAEWvH,EAAU,4BAA+B,eAAC4H,GAAD,CAAU3D,UAAU,eAApB,SAIhCvC,GAAQA,EAAK4I,YAAYC,SAASjF,KAAI,SAACkF,EAAIpD,GAEnC,OAEA,gBAACW,GAAD,CAA0BE,WAAauC,EAAIU,MAAMhI,KAAOwD,EAAYxD,IAApE,cACI,gBAACiF,GAAD,CAAuBC,YAAeS,GAClCnH,EAAK4I,YAAYxH,QAAQqI,WAAU,SAACR,GAAD,OAAMA,EAAEzH,KAAOsH,EAAIU,MAAMhI,QADhE,UAGI,wBAAMjD,MAAO,CAACc,SAAS,IAAvB,cAA8B,oBAAIkD,UAAU,gBAA5C,IAA6DuG,EAAIU,MAAMjM,SAAvE,QACA,wBAAMgB,MAAO,CAACC,MAAM,WAApB,eAAmCsK,EAAIY,KAAvC,UAGAZ,EAAIb,gBAAmB,gBAACf,GAAD,WACnB,gBAACF,GAAD,CAAoBxI,MAAO2I,GAAY,OAACnH,QAAD,IAACA,OAAD,EAACA,EAAM4I,YAAYxH,QAAQqI,WAAU,SAACR,GAAD,OAAMA,EAAEzH,KAAOsH,EAAIb,eAAeuB,MAAMhI,QAAOjD,MAAO,CAACoL,IAAI,EAAEC,KAAK,GAA9I,UACI,oBAAIrH,UAAU,gBACd,gCACEuG,EAAIb,eAAeuB,MAAMjM,WAE3B,uBAAMgB,MAAO,CAAC2K,WAAW,EAAE1K,MAAM,WAAjC,SACEsK,EAAIb,eAAeyB,UAIrBZ,EAAIb,eAAe9L,QAI/B,eAACqK,GAAD,UAEWgB,GAAqBsB,EAAItH,IACvB,eAACoF,GAAD,CACGiD,UAAW,SAACpG,GA9K5C,IAACqG,EAAGjL,EA+K4C,SAAT4E,EAAEsG,MA/KxCD,EAgLwDhB,EAAItH,IAhLzD3C,EAgL+D4E,EAAEuG,OAAOnL,MA/K5FiJ,EAAc,CACV/I,UAAU,CACNkL,UAAUH,GAAM,KAChBvI,OAAO8F,EAAMC,OAAO/D,IAAM,KAC1B2G,YAAYrL,GAAS,UA8KoBsL,aAAgBrB,EAAI3M,OACrB2M,EAAI3M,OAIZ2M,EAAIU,MAAMhI,KAAOwD,EAAYxD,IAC7B,gBAAC,KAAM0D,SAAP,WACQ,eAACkB,GAAD,CAAgBtH,QAAU,kBAlMzDgL,EAkM8EhB,EAAItH,SAjMnGqG,EAAc,CACV9I,UAAU,CACNkL,UAAUH,GAAM,KAChBvI,OAAO8F,EAAMC,OAAO/D,IAAM,QAJlB,IAACuG,GAkM+B,SACI,oBAAGvL,MAAO,CAACC,MAAM,WAAY+D,UAAU,uBAE3C,eAAC6D,GAAD,CAAiBtH,QAAU,kBAAK2I,EAAoBqB,EAAItH,MAAxD,SACI,oBAAGjD,MAAO,CAACC,MAAM,WAAY+D,UAAU,kBAE3C,eAAC6D,GAAD,CAAiBtH,QAAU,kBAAK4I,EAAaoB,IAA7C,SACI,oBAAGvK,MAAO,CAACC,MAAM,WAAY+D,UAAU,sBAG3C,eAAC6D,GAAD,CAAiBtH,QAAU,kBAAK4I,EAAaoB,IAA7C,SACI,oBAAGvK,MAAO,CAACC,MAAM,WAAY+D,UAAU,qBAlD5CmD,QA2DvC,gBAACmB,GAAD,CAAcC,UAAWA,EAAzB,UACQ,gBAACE,GAAD,CAAoBxI,MAAO2I,GAAY,OAACnH,QAAD,IAACA,OAAD,EAACA,EAAM4I,YAAYxH,QAAQqI,WAAU,SAACR,GAAD,OAAMA,EAAEzH,MAAF,OAASsF,QAAT,IAASA,OAAT,EAASA,EAAW0C,MAAMhI,SAA5G,UACY,oBAAIe,UAAU,gBACd,uCACEuE,QADF,IACEA,OADF,EACEA,EAAW0C,MAAMjM,WAEnB,uBAAMgB,MAAO,CAAC2K,WAAW,EAAE1K,MAAM,WAAjC,gBACEsI,QADF,IACEA,OADF,EACEA,EAAW4C,UAGzB,eAAC3C,GAAD,iBACcD,QADd,IACcA,OADd,EACcA,EAAW3K,OAEzB,eAAC8K,GAAD,CAAgBnI,QAAS,kBAAI4I,EAAa,OAA1C,SACW,oBAAG0C,MAAM,sBAI5B,gBAACrE,GAAD,WACQ,eAACC,GAAD,CAAepH,IAAM,SAAAA,GAAG,OAAIwI,EAAWxI,GACtCiL,UAAW,SAACpG,GACG,SAATA,EAAEsG,MACD/B,IACAvE,EAAEuG,OAAOnL,MAAQ,KAGxBwL,UAAU,QAEX,gBAACpE,GAAD,CAAMnH,QAASkJ,EAAf,cACQJ,EAAU,sBAAKzC,IAAI,YAAYC,MAAM,OAAS,OADtD,iB,SC3dbkF,GAzCM,SAAC,GAAuC,IAA1BC,EAAyB,EAAnCC,UAAyBC,EAAU,8BAEpDtN,EAAUC,eACVP,EAAWC,eAHyC,EAKnBc,wBAAa3B,GAAoB,CAElEyO,QAAQ,CACNvN,WAGF6F,YAAY,eAEZnF,YAAY,YAAiB,IAAf8M,EAAc,EAAdA,WAEV9N,EAAS,CACLqB,KAAK,WACLC,QAAQwM,OAjBoC,oBAKlDC,EALkD,YAKxCtM,EALwC,EAKxCA,QAAU0B,EAL8B,EAK9BA,KA0B1B,OANAqD,sBAAU,WAENuH,MAEF,IAEK,eAAC,KAAD,6BAAWH,GAAX,IAEHD,UAAc,SAAA9N,GAAK,OAEd4B,GAAW0B,EAAO,eAACuK,EAAD,gBAAe7N,IAAY,U,iBCfpDmO,GAAsB,IAAIC,YAAS,CACvCC,IAAI,kCAGAC,GAAS,IAAIC,KAAc,CAC/BF,IAAK,oCACLG,QAAS,CACPC,WAAW,EACXC,iBAAiB,CACfC,MAAMtN,aAAauN,QAAQ,aAO3BC,GAAQC,aAAYvL,GAFN,CAAEjB,KAAK,GAAK9B,MAAM,KAIhCuO,GAAYC,kBAChB,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,aAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGff,GACAH,IAGImB,GAAYpM,cAAQ,YAAkD,IAEtEnB,EAAYC,EAFWuN,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,aAGpC/O,EAHmE,EAAhB4O,UAG7BI,aAAtBhP,QAEN,GAAI8O,EAAe,CAAC,IAAD,iBAEAA,GAFA,IAEjB,2BAAgC,CAAC,IAAtBG,EAAqB,QAE3B,OAAOA,EAAGC,WAAWC,MAEpB,IAAK,kBACEf,GAAM1O,SAASoH,MACf9G,EAAQiB,KAAK,UAKrBK,EAAS,WAAO2N,EAAGC,WAAWC,KAArB,KACT5N,EAAUA,GAAW0N,EAAG1N,SAdZ,8BAkBjB6M,GAAM1O,SAAS,CACbqB,KAAK,YACLC,QAAQ,CACNM,YACAC,aAMFwN,GAAgBrM,QAAQC,IAAImM,MAI5BM,GAAiB,IAAIC,eAAY,SAAET,EAAYU,GAEnD,IAAMpB,EAAQtN,aAAauN,QAAQ,SASnC,OAPAS,EAAUW,WAAW,CACnBC,QAAQ,6BACHZ,EAAUI,aAAaQ,SADrB,IAELC,cAAevB,EAAK,iBAAaA,GAAU,OAIxCoB,EAAQV,MAIJ5H,GAAS,IAAI0I,gBAAa,CACrCC,KAAKC,gBAAK,CACRR,GACAP,GACAP,KAEFuB,MAAO,IAAIC,mBAmCEC,OA/Bf,WAEE,OAEE,eAAC,kBAAD,CAAgB/I,OAAUA,GAA1B,SAEE,eAAC,KAAD,UAEE,eAAC,KAAD,CAAUoH,MAAOA,GAAjB,SAEE,gBAAC,KAAD,WAEM,eAAC,KAAD,CAAO4B,OAAK,EAACC,KAAK,IAAI5C,UAAY,kBAAK,eAAC,KAAD,CAAUtL,GAAG,cACpD,eAAC,KAAD,CAAOkO,KAAK,SAAS5C,UAAa6C,KAClC,eAAC,KAAD,CAAOD,KAAK,YAAY5C,UAAY8C,KAEpC,eAAC,GAAD,CAAcF,KAAK,aAAc5C,UAAazF,GAAUoI,OAAK,IAC7D,eAAC,GAAD,CAAcC,KAAK,YAAc5C,UAAazJ,GAAOoM,OAAK,cC5H3DI,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnK,MAAK,YAAkD,IAA/CoK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,KAASC,OACP,eAAC,KAAMC,WAAP,UACE,eAAC,GAAD,MAEF9F,SAAS+F,eAAe,SAI1BX,M","file":"static/js/main.d031cda6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {gql} from '@apollo/client'\n\nexport const LOGIN_QUERY = gql`\n\n    query Login( $user:LoginInput! ){\n        loginUser( user:$user) {\n            username\n            email\n            jwt\n            _id\n        }\n    }\n\n`\n\n\nexport const CHECK_TOKEN_QUERY = gql`\n\n    query Check {\n         checkToken {\n            username\n            email\n            _id\n         }\n    }\n\n`","import React from 'react';\n\nexport const TitleImage = ( {text} )=> <h1> { text } </h1> ","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector , useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/client'\nimport {LOGIN_QUERY} from '../GraphqQL/Queries/AccountQuery';\nimport {TitleImage} from './title-image'\nimport {Link , useHistory, useLocation } from 'react-router-dom'\nimport queryString from 'querystring'\n\n\nconst GeneralWrapper = styled.div`\n\ndisplay:flex;\njustify-content:center;\nalign-items:center;\nflex-direction:column;\nheight:70%;\nwidth:100%;\n\n`\n\nconst InputBox = styled.input` margin-bottom:10px `\n\n\nconst LoginPage = ( props )=>{\n\n    const dispatch = useDispatch();\n    const errorState = useSelector( ( state = {} ) => state.error );\n    const history = useHistory();\n\n    const location = useLocation() ; \n\n    const { username } = queryString.parse(location.search.slice(1)) ; \n\n    var userNameRef , passwordRef;\n\n    const [ login , {  loading , error  }] = useLazyQuery(LOGIN_QUERY , {\n\n        onCompleted:({ loginUser })=>{\n\n            localStorage.setItem('token',loginUser.jwt);\n\n            dispatch({\n                type:\"SET_USER\",\n                payload:loginUser\n            }); \n\n            history.push('/main-page');\n\n        },\n\n    });\n  \n    const onLogin = ()=>{\n\n        login({\n            variables:{\n                user:{\n                    username:userNameRef.value || null,\n                    password:passwordRef.value || null\n                }\n            }\n        })\n       \n    }\n\n    return <GeneralWrapper>\n\n        <TitleImage text = \"Welcome To The Group-Chat !\" />\n        \n        { username ? <h5 style={{\n            color:\"green\"\n        }}> You Registered. Lets Sign In ! </h5> : null }\n\n        { loading ? <h6> Giriş Yapılıyor </h6> : \n          error ?   <h5 style={{\n              color:\"red\"\n          }}> { errorState.errorType + \" \" + errorState.message } </h5> : null\n        }\n\n        <InputBox placeholder=\"Username\" ref={ ref => userNameRef = ref } value={ username } />\n\n        <InputBox placeholder=\"Password\" ref={ ref => passwordRef = ref } type=\"password\" />\n        \n        <button onClick={ ()=>{ onLogin(); } } > LOG IN </button>\n\n        <Link to={{\n            pathname:\"/register\"\n        }} style={{\n            textDecoration:'none',\n            fontSize:13,\n            margin:5\n        }}> Go to Register ! </Link>\n\n    </GeneralWrapper>\n\n}\n\n\n\nexport default LoginPage;","import {gql} from '@apollo/client'\n\nexport const REGISTER_MUTATION = gql`\n\n    mutation Register($user:RegisterInput!){\n\n        registerUser(user:$user) {\n            username\n        }\n\n    }\n    \n`","import { useMutation } from '@apollo/client';\nimport React from 'react';\nimport styled from 'styled-components';\nimport {REGISTER_MUTATION} from '../GraphqQL/Mutations/AccountMutation';\nimport {TitleImage} from './title-image'\nimport {Link , useHistory} from 'react-router-dom'\nimport { useSelector , useDispatch } from 'react-redux';\n\nconst GeneralWrapper = styled.div`\n\ndisplay:flex;\njustify-content:center;\nalign-items:center;\nflex-direction:column;\nheight:70%;\nwidth:100%;\n\n`\n\nconst InputBox = styled.input` margin-bottom:10px `\n\nconst RegisterPage = ( props )=>{\n\n    const history = useHistory();\n    const errorState = useSelector( ( state = {} ) => state.error );\n\n    const [ register , { data , loading , error } ] = useMutation(REGISTER_MUTATION , {\n\n            onCompleted:( { registerUser } )=>{\n\n                history.push(`/login/?username=${registerUser.username}`);\n\n            } ,\n\n            onError:(error)=>{ console.log(error); }\n\n    })\n\n    let userNameRef , passwordRef , email;  \n \n    const onRegister = ()=>{\n\n        register({\n\n            variables:{\n                user:{\n                    username:userNameRef.value || null,\n                    email:email.value || null,\n                    password:passwordRef.value || null\n                }\n            }\n        })\n\n    }\n\n    return <GeneralWrapper>\n\n    <TitleImage text = \"Register to the Group-Chat\" />\n\n        { loading ? <h6> Registering... </h6> : null }\n        \n        { error ? <h5 style={{ color:\"red\"} } > { errorState.errorType + \" \" + errorState.message } </h5> : null}\n\n        <InputBox placeholder=\"Username\" ref={ ref => userNameRef = ref } />\n\n        <InputBox placeholder=\"email\" ref={ ref => email = ref }  />\n\n        <InputBox placeholder=\"Password\" ref={ ref => passwordRef = ref } type=\"password\" />\n        \n        <button onClick={ ()=>{ onRegister(); } } > REGISTER </button>\n\n        <Link to={{\n            pathname:\"/login\"\n        }}  style ={{\n             textDecoration:'none',\n             fontSize:13,\n             margin:5\n        }}> Go to Login ! </Link>\n\n    </GeneralWrapper>;\n\n}\n\nexport default RegisterPage;","import { client } from '../../App'\n\n\nconst UserReducer = ( state , action )=>{\n \n    \n    switch( action.type ) {\n\n        case \"SET_USER\": \n\n            return {\n                ...state,\n                user:action.payload,\n            }\n\n        case \"SET_ERROR\": \n\n            return {\n                ...state,\n                 error:action.payload\n            }\n            \n\n        case \"LOGOUT\": \n\n            return {\n                ...action.payload\n            }   \n        \n        default: \n\n            return state\n            \n            break;\n\n    }\n\n}\n\n\nexport default UserReducer;","import {gql} from '@apollo/client'\n\nexport const GET_USER_ROOMS_QUERY = gql`\n\n    query GetRooms{\n        getUserRooms {\n\n            _id\n            limit\n            title\n            members{\n                username\n                _id\n            }\n\n        }\n    }\n\n`\n  \nexport const GET_OTHER_ROOMS_QUERY = gql`\n\n    query GetOtherRooms{\n        getOtherRooms {\n\n            _id\n            limit\n            title\n            members{\n                username\n                _id\n            }\n            host{\n                username\n                _id\n            }\n         \n        }\n    }\n\n`\n\n\nexport const GET_CHAT_ROOM_QUERY = gql`\n\n    query GetChatRoom($roomID:ID!) {\n\n        getChatRoom(roomID:$roomID) {\n\n            limit\n            \n            host {\n                _id\n            }\n\n            messages {\n                _id\n                text\n                owner {\n                    username\n                    _id\n                }\n                date\n                repliedMessage {\n                    owner {\n                        username\n                        _id\n                    }\n                    text\n                    date\n                }\n            }\n\n            members {\n                username\n                _id\n            }\n\n        }\n\n    }\n\n`","import {gql} from '@apollo/client'\n\nexport const CREATE_ROOM_MUTATION = gql`\n\n    mutation CreateRoom($room:RoomInput!){\n\n        createRoom(room:$room) {\n            title\n            limit\n        }\n\n    }\n    \n`\n\nexport const JOIN_ROOM_MUTATION = gql`\n    mutation JoinRoom($roomID:ID!,$limit:Int!,$memberLength:Int!) {\n        joinRoom(roomID:$roomID,limit:$limit,memberLength:$memberLength) {\n            _id\n            title\n            limit\n        }\n    }\n`\n\nexport const LEAVE_ROOM_MUTATION = gql`\n\n    mutation LeaveRoom($roomID:ID!) {\n\n        leaveRoom(roomID:$roomID) {\n\n            title\n            _id\n\n        }\n\n    }\n\n\n`\n\n\nexport const MEMBER_JOINED_ROOM = gql`\n\n    subscription MemberJoined($roomID:ID) {\n        room(roomID:$roomID) {\n\n             user {\n                username\n                _id         \n             }\n            \n             roomID\n             actionType\n        }\n    }\n\n`\n\nexport const SEND_MESSAGE_MUTATION = gql`\n\n    mutation SendMessage($text:String!,$roomID:ID!,$repliedMessage:ID) {\n        sendMessage(text:$text,roomID:$roomID,repliedMessage:$repliedMessage) {\n            _id\n            text\n        }\n    }\n\n`\n\nexport const DELETE_MESSAGE_MUTATION = gql`\n\n    mutation DeleteMessage($messageID:ID!,$roomID:ID!) {\n\n        deleteMessage(messageID:$messageID,roomID:$roomID) {\n            _id\n            text\n        }\n    }\n`\nexport const UPDATE_MESSAGE_MUTATION = gql`\n\n    mutation UpdateMessage($messageID:ID!,$updatedText:String!,$roomID:ID!) {\n\n        updateMessage(messageID:$messageID,updatedText:$updatedText,roomID:$roomID){\n\n            _id\n            text\n        }\n\n    }\n\n`\n\nexport const MESSAGE = gql`\n\n    subscription MessageSent($roomID:ID!) {\n\n        message(roomID:$roomID) {\n            _id\n            text\n            date\n            owner {\n                username\n                _id\n            }\n            actionType\n        }\n\n    }\n\n`\n\n\n\n","import React, { useState } from 'react';\r\nimport { useSubscription } from '@apollo/client'\r\nimport styled from 'styled-components';\r\nimport { MEMBER_JOINED_ROOM } from '../../GraphqQL/Mutations/CatchRoomMutation'\r\n\r\nconst InnerRooms = styled.div`\r\ndisplay:flex;\r\n\r\npadding:10px;\r\nalign-items:center;\r\n&:hover{\r\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n    cursor:pointer\r\n}\r\n`\r\n\r\nexport const Room = ({ room, joinRoom, userRoom }) => { // it iss so logical to set useSubscription in every room component\r\n\r\n    const [members, setMembers] = useState(room.members);\r\n    const { data } = useSubscription(\r\n        MEMBER_JOINED_ROOM,\r\n        {\r\n            variables: { roomID: room._id },\r\n            onSubscriptionData: ({ subscriptionData }) => {\r\n                if (subscriptionData.data.room.actionType == \"JOIN\") {\r\n                    setMembers(prev => prev.concat(subscriptionData.data.room.user))\r\n                }\r\n                else if (subscriptionData.data.room.actionType == \"LEAVE\") {\r\n                    setMembers(prev => prev.filter((u) => subscriptionData.data.room.user._id != u._id))\r\n                }\r\n            }\r\n        },\r\n    );\r\n\r\n    return <InnerRooms key={room._id} onClick={joinRoom(room._id, room.limit, members.length)} >\r\n        <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flex: 1 }} >\r\n            <i style={{ marginRight: 8, color: userRoom ? \"#f05454\" : \"#00af91\" }} className=\"fas fa-comment\"></i>\r\n            {room.title.length > 10 ? room.title.slice(0, 5) + \"...\" : room.title}\r\n        </span>\r\n        {\r\n            !userRoom && <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flex: 1 }} >\r\n                <i style={{ marginRight: 8, color: \"#00af91\" }} className=\"fas fa-wifi\"></i>\r\n                {room.host.username} </span>\r\n        }\r\n        <span style={{\r\n            display: 'flex', alignItems: 'center',\r\n            color: members.length === room.limit ? 'red' : '#76a21e'\r\n            , justifyContent: 'space-between', flex: 0.2\r\n        }}>\r\n            <i style={{ marginRight: 8, color: userRoom ? \"#f05454\" : \"#00af91\" }} className=\"fas fa-user-friends\"></i>\r\n            {members.length + \"/\" + room.limit}\r\n        </span>\r\n\r\n    </InnerRooms>\r\n\r\n}","import React , {useEffect} from 'react';\nimport styled from 'styled-components';\nimport { useSelector , useDispatch } from 'react-redux';\nimport {  useHistory } from 'react-router-dom'\nimport { useQuery , NetworkStatus , useMutation } from '@apollo/client'\nimport { GET_USER_ROOMS_QUERY } from '../../GraphqQL/Queries/ChatRoomQuery'\nimport { JOIN_ROOM_MUTATION , MEMBER_JOINED_ROOM } from '../../GraphqQL/Mutations/CatchRoomMutation'\nimport {Room} from '../components/roomComp'\n\nconst Container = styled.div`\n\n    padding:15px;\n    display:flex;\n    flex-direction:column;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n    width:40%;\n    height:90%;\n    box-sizing: border-box;\n`\n\n\nconst Rooms = styled.div`\n\nwidth:100%;\nheight:100%;\ndisplay:flex;\nflex-direction:column;\nmargin-top:25px;\n\n`\nconst InnerRooms = styled.div`\n\ndisplay:flex;\njustify-content:space-between;\npadding:10px;\nalign-items:center;\n&:hover{\n        box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n        cursor:pointer\n}\n\n\n`\n\nconst UserRooms = ( { timeToRefetch , setTimeToRefetch} )=>{\n\n        const { data , loading , error , refetch  } = useQuery(GET_USER_ROOMS_QUERY, {\n                fetchPolicy:\"network-only\",        \n                notifyOnNetworkStatusChange:true  \n        });\n\n        const history = useHistory();\n\n        const [ join ]  = useMutation(JOIN_ROOM_MUTATION , {\n\n                onError:(error)=> console.log(error) ,\n\n                onCompleted:({joinRoom})=>{\n\n                        history.push('/room/'+joinRoom._id);\n\n                }\n\n        });\n\n\n        const storeError = useSelector( ( state = {} ) => state.error ); \n\n        useEffect(()=>{\n\n                if(timeToRefetch) {\n\n                        refetch().then(()=>{\n\n                                setTimeToRefetch(false);\n                 \n                        })\n\n                }\n              \n        },[timeToRefetch]);\n\n        \n        const joinRoom = (id,limit,memberLength)=>(e)=>{\n \n                join({\n\n                    variables:{\n                        roomID:id,\n                        limit,\n                        memberLength\n                     }\n\n               })\n\n        }\n\n\n        return (\n\n                <Container>\n\n                        <span style={{textAlign:\"center\"}}> My Rooms </span>\n\n                        <Rooms>\n                                {\n\n                                loading ? <span> Fetching... </span> : \n                                error ?   <span> {storeError.errorType + \" \" + storeError.message} </span> : \n                               \n                                data.getUserRooms.map((room)=>{\n\n                                        return (\n\n                                                <Room \n                                                key={room._id} \n                                                room={room} \n                                                joinRoom={joinRoom}\n                                                userRoom={true}\n                                                />\n\n                                        )\n\n                                  })                \n                                }\n                        </Rooms>\n\n                </Container>\n\n        )\n}\n\n\nexport default UserRooms;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector  } from 'react-redux';\nimport {  useHistory } from 'react-router-dom'\nimport { useQuery , useMutation  } from '@apollo/client'\nimport { GET_OTHER_ROOMS_QUERY } from '../../GraphqQL/Queries/ChatRoomQuery'\nimport { JOIN_ROOM_MUTATION } from '../../GraphqQL/Mutations/CatchRoomMutation'\nimport {Room} from '../components/roomComp'\n\nconst Container = styled.div`\n\n    padding:15px;\n    display:flex;\n    flex-direction:column;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n    width:40%;\n    height:90%;\n    box-sizing: border-box;\n    \n`\nconst Rooms = styled.div`\nwidth:100%;\nheight:100%;\ndisplay:flex;\nflex-direction:column;\nmargin-top:25px;\n`\n\nconst Refresh = styled.div`\nposition:absolute;\nleft:0;\n&:hover{\n        cursor:pointer\n}\n\n`\nconst OtherRooms = ()=>{\n\n        const { data , loading , error , refetch } = useQuery(GET_OTHER_ROOMS_QUERY, {\n               fetchPolicy:\"network-only\"\n        }) \n        const history = useHistory();\n        const [ join ]  = useMutation(JOIN_ROOM_MUTATION , {\n                onError:(error)=> console.log(error) ,\n                onCompleted:({joinRoom})=>{\n                        history.push('/room/'+joinRoom._id);\n                }\n        });\n        const storeError = useSelector( ( state = {} ) => state.error ); \n        const joinRoom = (id,limit,memberLength)=>(e)=>{\n                join({\n                    variables:{\n                        roomID:id,\n                        limit,\n                        memberLength\n                     }\n\n               })\n        }\n        return (\n\n                <Container>\n                        <span style={{textAlign:\"center\",position:'relative'}} >                               \n                                Other Rooms\n                                <Refresh onClick={()=>refetch()} className=\"fas fa-sync\" ></Refresh>                      \n                        </span>\n                        <Rooms>\n                                {\n                                loading ? <span> Fetching... </span> : \n                                error ?   <span> {storeError.errorType + \" \" + storeError.message} </span> :                  \n                                data.getOtherRooms.map((room)=>{ \n                                        return <Room \n                                                key={room._id}\n                                                room={room}\n                                                joinRoom={joinRoom} /> \n                                }) }\n                        </Rooms>\n                </Container>\n\n        )\n}\n\n\nexport default OtherRooms;","import { client } from '../../App'\n\nexport const logout = ()=>{ // we can use actions to do some operations about the login state\n\n        localStorage.removeItem('token');\n        client.clearStore();\n\n        return {\n           type:'LOGOUT',\n           payload:{\n               user:{},\n               error:{}\n           }\n        }\n\n}","import React , {useState} from 'react';\nimport styled from 'styled-components';\nimport { useSelector , useDispatch } from 'react-redux';\nimport {  useHistory } from 'react-router-dom'\nimport UserRooms from './userRooms'\nimport OtherRooms from './otherrooms'\nimport { logout } from '../../Actions/action'// import RoomQuery from './roomQuery'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_ROOM_MUTATION  } from '../../GraphqQL/Mutations/CatchRoomMutation'\n\nconst GeneralWrapper = styled.div`\n    display:flex;\n    justify-content:space-around;\n    align-items:center;\n    height:100%;\n    width:88%;\n    margin:0 auto;\n`\n\nconst InnerDiv = styled.div`\n\n    height:500px;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n    flex:0.75;\n    display:flex;\n    justify-content:space-evenly;\n    align-items:center;\n    box-sizing: border-box;\n    padding:10px;\n`\n\nconst LogOut = styled.div`\n\n    position:fixed;\n    height:40px;\n    width:100px;\n    top:10px;\n    left:10px;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n    &:hover{\n    cursor:pointer;\n    background:blue;\n    color:white;\n    transition:100ms;\n    }\n    display:flex;\n    align-items:center;\n    justify-content:center;\n`\n\nconst UserInformation = styled.div`\n    display:flex;\n    flex-direction:column;\n    align-items:flex-start;\n    width:70%;\n`\nconst Innerbuttons = styled.div`\n    display:flex;\n    flex-direction:column;\n    align-items:center;\n    width:100%;\n    margin-top:30px;\n\n`\n\nconst Profile = styled.div`\n\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n    height:500px;\n    flex:0.20;\n    display:flex;\n    flex-direction:column;\n    border-radius:8px;\n    align-items:center; \n\n`\nconst TextSpan = styled.span`\n    font-size:13px;\n    margin:3px;\n`\nconst Button = styled.button`\n        border:none;\n        padding:10px;\n        width:100%;\n        margin-top:15px;\n        display:flex;\n        justify-content:space-around;\n        cursor:pointer;\n        &:hover{\n            box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px, rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n        }\n`\nconst InnerInputWrapper = styled.div`\n\ndisplay:flex;\nflex-direction:column;\nwidth:80%;\nfont-size:14px;\nmargin-top:20px;\n\n`\n\nconst MainPage = ( props )=>{\n\n    const currentUser = useSelector(( state = {} ) => state.user || {} );\n\n    const [ create , { loading , error } ] = useMutation(CREATE_ROOM_MUTATION , {\n        onError:(error)=>{ console.log(error) }\n    });\n    \n    const dispatch = useDispatch();\n    const history = useHistory();\n    const storeError = useSelector( ( state = {} ) => state.error);\n    const [ timeToRefetch , setTimeToRefetch ] = useState(false);\n\n    let limit , title;\n\n    const onLogout = ()=>{\n\n        localStorage.removeItem('token');\n        dispatch( logout() );\n        history.push(\"/login\");\n\n    }\n\n    const createRoom = ()=>{\n\n        create({\n            variables:{\n                room:{\n                    title: title.value.toLowerCase() || null,\n                    limit: parseInt( limit.value ) || null\n                }\n            }\n        }).then(()=>{\n                    setTimeToRefetch(true);\n        })\n\n    }\n\n    return   <React.Fragment>\n\n          { error &&  storeError.errorType + \" \" + storeError.message}  \n          \n        <GeneralWrapper> \n\n         <LogOut onClick={ onLogout } >\n             LOG OUT\n         </LogOut>\n\n         <Profile>\n            \n            <img src=\"/userpng.png\" width=\"60%\" style={{marginBottom:20 , marginTop:20}}/>\n\n            <UserInformation>\n\n                  <TextSpan> username : {currentUser.username} </TextSpan>\n                  <TextSpan> email : {currentUser.email} </TextSpan>  \n\n            </UserInformation>\n\n\n            <Innerbuttons >\n                            \n                    <InnerInputWrapper>\n\n                                <div style={{display:'flex', justifyContent:'space-between',width:'100%'}}>  \n\n                                    <span > Title :</span> \n                                    <input ref={ref=>title=ref} style={{width:'50%'}} placeholder=\"title\"/>\n\n                                </div>\n\n                                <div style={{display:'flex', marginTop:6, justifyContent:'space-between',width:'100%'}}>   \n\n                                    <span>Max People :</span> \n\n                                    <select style={{width:'100px'}} ref={ref=>limit=ref}>\n                                                {\n                                                    Array(10).fill().map((_,index)=> <option key={index} > {index+1} </option>)\n                                                }\n                                    </select>\n\n                                </div>\n                             \n                                <Button onClick={createRoom}> Createa Room  <i className=\"fas fa-plus\"></i> </Button>\n                    </InnerInputWrapper>\n\n                    {/* <InnerInputWrapper>\n\n                         \n                            <input style={{width:'100%'}} placeholder=\"Search...\"/>\n\n                            <Button onClick={createRoom}> Search Room  <i className=\"fas fa-search\"></i> </Button>\n\n                    </InnerInputWrapper> */}\n\n            </Innerbuttons>\n        \n         </Profile>\n\n              \n         <InnerDiv>        \n                                 \n                  <UserRooms timeToRefetch = {timeToRefetch}  setTimeToRefetch = {setTimeToRefetch}/>\n                  <OtherRooms/>\n                  \n         </InnerDiv>\n    \n    </GeneralWrapper>\n\n     </React.Fragment>\n\n}\n\n\nexport default MainPage;","import React, {useEffect,useState} from 'react'\nimport { useQuery , useMutation } from '@apollo/client'\nimport { GET_CHAT_ROOM_QUERY } from '../../GraphqQL/Queries/ChatRoomQuery'\nimport {  \n    SEND_MESSAGE_MUTATION , \n    MESSAGE,\n    MEMBER_JOINED_ROOM,\n    DELETE_MESSAGE_MUTATION , \n    LEAVE_ROOM_MUTATION ,\n    UPDATE_MESSAGE_MUTATION\n} from '../../GraphqQL/Mutations/CatchRoomMutation'\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom'\n\n\nconst GeneralWrapper = styled.div`\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    height:100%;\n    margin:0 auto;\n    background:#242c37;\n    position:relative;\n`\n\n\nconst ChatBox = styled.div`\n\n    height:530px;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n    display:flex;\n    flex-direction:column;\n    justify-content:space-between;\n    align-items:center;\n    box-sizing: border-box;\n    width:44%;\n    margin-left:20px;\n    padding:10px;\n    background:white;\n \n\n`\nconst Members = styled.div`\n\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n    height:530px;\n    width:15%;\n    display:flex;\n    flex-direction:column;\n\n    align-items:center; \n    box-sizing: border-box;\n    padding:10px;\n    background:white;\n\n`\n//................................\n\nconst TextPart = styled.div`\n    display:flex;\n    justify-content:space-between;\n    width:100%;\n    flex:0.06;\n`\n\nconst ChatTextInput = styled.input`\n\n    flex:0.83;\n    height:30px;\n    font-size:17px;\n    background:#6f9eaf;\n    color:white;\n    border:none;\n    padding:5px 10px;\n    outline: none;\n\n`\n\nconst Send = styled.button`\n\n    background:#ef4f4f;\n    color:white;\n    border:none;\n    flex:0.15;\n    &:hover{\n        cursor:pointer\n    }\n`\n\nconst Messages = styled.ul`\n    \n flex:0.94;\n width:100%;\n display:flex;\n flex-direction:column;\n list-style: none;\n padding:0;\n overflow:scroll;\n overflow-x: hidden;\n`\n\nconst EditTextBubble = styled.div`\nalign-items:center;\njustify-content:center;\ndisplay:flex;\noverflow: hidden;\nwidth:0;\ntransition:110ms;\n`\n\n\nconst InnerMessage = styled.li`\n\n width:100%;\n display:flex;\n list-style: none;\n flex-direction:${ ({checkOwner})=> checkOwner ? 'row' : 'row-reverse'}; \n justify-content:flex-end;\n padding:8px 15px 8px 15px;\n border-radius:5px;\n box-sizing: border-box;\n &:hover {\n    cursor:pointer;\n    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n }\n &:hover ${EditTextBubble}{\n    margin:${ ({checkOwner})=> checkOwner ? '0 1.5px' : '0 8px 0 1.5px'}; \n    width:20px;\n    cursor:pointer;\n}\n \n`\n\nconst TextBubble = styled.div`\n background: #6f9eaf;\n color:white;\n padding:6px;\n border-radius:5px;\n max-width:35%;\n white-space:normal;\n overflow-wrap: break-word;\n`\n\nconst TextInformationBubble = styled.span`\ndisplay:flex;\nflex-direction:column;\njustify-content:center;\nfont-size:10px;\npadding:0 7px;\nalign-items:center;\ncolor:${({memberColor})=>memberColor};\n\n`\n\nconst LeaveGroup = styled.button`\n\n    background:#ef4f4f;\n    color:white;\n    border:none;\n    border-radius:8px;\n    font-size:12px;\n    &:hover{\n        cursor:pointer\n    }\n    position:absolute;\n    top:20px;\n    left:20px;\n    padding:10px;\n\n`\nconst UpdateText = styled.input`\n        outline: none;\n        border-radius:7px;\n        border:none;\n        padding:5px;\n        color:white;\n        background:#007580;\n`\n//-------------------------------------------------------------------------------\n\nconst ReplyWrapper = styled.div`\n        overflow:hidden;\n        transition:110ms;\n        width:100%;\n        border-radius:7px;\n        position:relative;  \n        display:flex;\n        background:#e5ddd5;\n        justify-content:space-between;\n        align-items:center;\n        margin-bottom:5px;\n        height:${({isReplied})=>isReplied?'75px':'0px'};\n`\nconst ReplyText = styled.div`\n        height:100%;\n        width:100%;\n        color:rgba(0, 0, 0, 0.6);\n        box-sizing: border-box;\n        display:flex;\n        align-items:center;\n        padding:20px 10px;\n        font-size:14px;\n        overflow-wrap: break-word;\n        white-space:normal;\n`\nconst RepliedMessageInfo = styled.div`\n        position:absolute;\n        color:${({color})=>color};\n        top:8px;\n        left:8px;\n        font-size:11px;\n`\nconst ReplyCloseIcon = styled.div`\n    font-size:20px;\n    &:hover{\n    cursor:pointer\n    }\n    color:grey;\n    margin-right:20px;\n`\nconst RepliedMessageTextBubble = styled.div`\n    background:#e5ddd5;\n    color:white;\n    padding:20px 10px 4px 10px;\n    border-radius:5px;\n    max-width:35%;\n    min-width:66px;\n    white-space:normal;\n    display:flex;\n    position:relative;\n    align-items:center;\n    overflow-wrap: break-word;\n    margin-right:4px;\n    margin-left:4px;\n    font-size:14px;\n    color:rgba(0, 0, 0, 0.6);\n`\n\n\n\n\n\n    \nconst memberColors = [ \"#F8485E \", \"#00C1D4\", \"DarkCyan\", \"DarkGoldenRod\", \"DarkBlue\", \"DarkRed\", \"DarkOrange\", \"Indigo\" , \"Purple\" , \"YellowGreen\"];\n\nconst Room = ({match})=>{\n    const { data , loading , error , subscribeToMore } = useQuery(GET_CHAT_ROOM_QUERY,{\n        variables:{\n            roomID:match.params.id\n        }});\n    const history = useHistory();\n    const [isBeingUpdatedID,setIsBeingUpdatedID] = useState(false);\n    const [isReplied,setIsReplied] = useState();\n    const [ send , { loading:Loading } ] = useMutation(SEND_MESSAGE_MUTATION);\n    const [ deleteMessage ] = useMutation(DELETE_MESSAGE_MUTATION);\n    const [ updateMessage ] = useMutation(UPDATE_MESSAGE_MUTATION);\n    const [ leaveRoom ] = useMutation(LEAVE_ROOM_MUTATION , {\n        onCompleted:(data)=>{\n            history.push('/main-page');\n        }\n    });\n    const currentUser = useSelector((state = {}) => state.user);\n    const OnSendMessage = ()=>{\n        if(chatText.value) {\n            send({\n                variables:{\n                        text:chatText.value || null,\n                        roomID:match.params.id || null,\n                        repliedMessage:isReplied?._id\n                }        \n            })\n        }\n    }\n    const onLeaveRoom = ()=>{\n        leaveRoom({\n            variables:{\n                roomID:match.params.id\n            } \n        })\n    }\n    const OnDeleteMessage = (ID)=>{\n            deleteMessage({\n                variables:{\n                    messageID:ID || null,\n                    roomID:match.params.id || null\n                }\n            })\n    }\n    const onUpdateMessage = (ID,value)=>{\n            updateMessage({\n                variables:{\n                    messageID:ID || null,\n                    roomID:match.params.id || null,\n                    updatedText:value || null\n                }\n            })\n    }\n\n    useEffect(()=>{ // we can handle user's status in room by using unmount function provided by useffect !\n        return ()=>{\n            onLeaveRoom();\n        }\n    },[])\n\n    console.log(data)\n\n    useEffect(()=>{\n        subscribeToMore({\n            variables:{\n                roomID:match.params.id,\n            },\n            document:MESSAGE,\n            updateQuery:(prev, { subscriptionData })=>{\n                const subMessage = subscriptionData.data.message;\n                const type = subscriptionData.data.message.actionType;\n                console.log(subscriptionData)\n                switch(type) {\n                    case 'SEND': \n                        setTimeout(()=>{ var chat = document.querySelector(\".chatMessages\"); chat.scrollTo(0, 7000); },0)\n                        var updatedData = Object.assign({},prev.getChatRoom,{\n                            messages:prev.getChatRoom.messages.concat(subMessage)\n                        })  // message type must be the same shape as prevmessagetype\n                    break;  \n                    case 'DELETE':\n                        var updatedData = Object.assign({},prev.getChatRoom,{\n                            messages:prev.getChatRoom.messages.filter((msg)=> msg._id != subMessage._id )\n                        })\n                    break;\n                    case 'UPDATE':\n                        setIsBeingUpdatedID(null);\n                        var updatedData = Object.assign({},prev.getChatRoom,{\n                            messages:prev.getChatRoom.messages.map(\n                            (msg)=> { \n                                return msg._id == subMessage._id ?  Object.assign({},msg,{text:subMessage.text}) : msg } )\n                            })               \n                    break;\n                    default:\n                        var updatedData = prev.getChatRoom;\n                    break;\n                }\n              \n                return {\n                    getChatRoom:updatedData  \n                } \n\n            }\n        })\n\n        subscribeToMore({\n            variables:{\n                roomID:match.params.id\n            },\n            document:MEMBER_JOINED_ROOM,\n            updateQuery:(prev,{subscriptionData})=>{\n                const joinedMember = subscriptionData.data.room;        \n                switch(joinedMember.actionType) {\n                   case \"JOIN\":\n                        var mergedData = Object.assign({},prev.getChatRoom,{\n                            members:prev.getChatRoom.members.concat(joinedMember.user)\n                        })\n                   break;\n                   case \"LEAVE\":\n                        var mergedData = Object.assign({},prev.getChatRoom,{\n                            members:prev.getChatRoom.members.filter((m)=> m._id != joinedMember.user._id )\n                        })\n                   break;\n                   default:\n                         var mergedData = prev.getChatRoom;\n                    break;\n                }\n                return {\n                    getChatRoom:mergedData\n                }\n\n            }\n        })\n\n    },[])\n\n    var chatText;\n \n\n    return <GeneralWrapper> \n\n            <LeaveGroup onClick={onLeaveRoom}>  \n                    \n                 LEAVE THE ROOM  <i style={{fontSize:14 , marginLeft:4}} className=\"fas fa-sign-out-alt\"></i>\n\n            </LeaveGroup>\n            \n            <Members>\n                <span style={{color:\"#ef4f4f\",fontSize:13,fontWeight:\"600\",letterSpacing:1}}>             \n                    GROUP MEMBERS                 \n                    <span style={{marginLeft:5, fontWeight:600}}>                   \n                        { data &&                     \n                            <React.Fragment> { /* we need to use react fragment here to convert ( to string */ }\n                                (                                   \n                                    {\n                                        ( data.getChatRoom.members.length + '/' +   data.getChatRoom.limit)     \n                                    }\n\n                                    <i style={{fontSize:10,marginLeft:2}} className=\"fas fa-user\"/>                                 \n                                )                                 \n                            </React.Fragment> }                \n                    </span>\n                </span>\n\n                <ul style={{ padding:0,listStyle:\"none\" , width:\"100%\" , marginTop:30 }}>\n\n                    {\n                        data && data.getChatRoom.members.map((member,index)=>{\n                            return (\n                            <li style={{padding:5,width:\"50%\",display:\"flex\",fontSize:17.5,alignItems:\"center\"}} key={member._id} >                    \n                                <i className=\"fas fa-user\" style={{color:memberColors[index],fontSize:15}}/> \n                                <span style={{marginLeft:10,fontSize:14}}> {member.username} </span>        \n                                { \n                                   data.getChatRoom.host._id == member._id &&  <i className=\"fas fa-crown\" style={{color:\"#f0a500\",fontSize:11,marginLeft:4}}/>  \n                                }      \n                            </li>\n                        )})  \n                    }\n                </ul>\n\n            </Members>\n\n            <ChatBox>\n\n                     { loading ? \" Messages are loading....\"  : <Messages className=\"chatMessages\" >\n\n\n                        {\n                                data && data.getChatRoom.messages.map((msg,index)=>{\n\n                                        return (\n                                        \n                                        <InnerMessage key={index} checkOwner={ msg.owner._id == currentUser._id } > {/* row-reverse also reverses the end and start property */}\n                                            <TextInformationBubble memberColor = {memberColors[\n                                                data.getChatRoom.members.findIndex((m)=> m._id == msg.owner._id)\n                                            ]} >\n                                                <span style={{fontSize:12}} > <i  className=\"fas fa-user\"/> {msg.owner.username}  </span>\n                                                <span style={{color:\"#628395\"}}>  {msg.date} </span>\n                                            </TextInformationBubble> \n                                            {\n                                                msg.repliedMessage &&  <RepliedMessageTextBubble>  \n                                                    <RepliedMessageInfo color={memberColors[data?.getChatRoom.members.findIndex((m)=> m._id == msg.repliedMessage.owner._id)]} style={{top:4,left:4}}>\n                                                        <i  className=\"fas fa-user\"/>\n                                                        <span>\n                                                        { msg.repliedMessage.owner.username }\n                                                        </span>               \n                                                        <span style={{marginLeft:3,color:\"#628395\"}}>\n                                                        { msg.repliedMessage.date }\n                                                        </span>\n                                                    </RepliedMessageInfo>\n                                                    {\n                                                        msg.repliedMessage.text\n                                                    }\n                                                </RepliedMessageTextBubble> \n                                            }                                                                                                                       \n                                            <TextBubble>  \n                                                   {\n                                                       isBeingUpdatedID ==  msg._id ?                                \n                                                       ( <UpdateText                                                  \n                                                            onKeyDown={(e)=>{\n                                                                if(e.key == \"Enter\") { \n                                                                    onUpdateMessage( msg._id , e.target.value )                                                                \n                                                                }   \n                                                            }}\n                                                             defaultValue = {msg.text} />                                                      \n                                                        ) : msg.text\n                                                   } \n                                            </TextBubble>\n                                            {\n                                                    msg.owner._id == currentUser._id ?  (\n                                                    <React.Fragment>\n                                                            <EditTextBubble onClick={ ()=> OnDeleteMessage(msg._id) } >\n                                                                <i style={{color:\"#ec4646\"}} className=\"fas fa-trash-alt\"></i>           \n                                                            </EditTextBubble> \n                                                            <EditTextBubble  onClick={ ()=> setIsBeingUpdatedID(msg._id) } >\n                                                                <i style={{color:\"#ec4646\"}} className=\"fas fa-edit\"></i>         \n                                                            </EditTextBubble>   \n                                                            <EditTextBubble  onClick={ ()=> setIsReplied(msg) } >\n                                                                <i style={{color:\"#ec4646\"}} className=\"fas fa-reply\"></i>\n                                                            </EditTextBubble>                                                                    \n                                                    </React.Fragment>) :                                                      \n                                                            <EditTextBubble  onClick={ ()=> setIsReplied(msg) } >\n                                                                <i style={{color:\"#ec4646\"}} className=\"fas fa-reply\"></i>\n                                                            </EditTextBubble>\n                                            }                                        \n                                        </InnerMessage> \n                                        \n                                    )\n                                })\n                        }\n                     </Messages> }\n                    <ReplyWrapper isReplied={isReplied}>\n                            <RepliedMessageInfo color={memberColors[data?.getChatRoom.members.findIndex((m)=> m._id == isReplied?.owner._id)]}>\n                                        <i  className=\"fas fa-user\"/>\n                                        <span>\n                                        { isReplied?.owner.username }\n                                        </span>               \n                                        <span style={{marginLeft:8,color:\"#628395\"}}>\n                                        { isReplied?.date }\n                                        </span>\n                            </RepliedMessageInfo>\n                            <ReplyText>\n                                        { isReplied?.text }\n                            </ReplyText>\n                            <ReplyCloseIcon onClick={()=>setIsReplied(null)}>\n                                       <i class=\"fas fa-times\"></i>\n                            </ReplyCloseIcon>      \n                    </ReplyWrapper>\n\n                    <TextPart>\n                            <ChatTextInput ref={ ref => chatText = ref }                \n                             onKeyDown={(e)=>{\n                                if(e.key == \"Enter\") { // we can use onKeyDown event to handle keyboard actions !\n                                    OnSendMessage()\n                                    e.target.value = \"\"\n                                }\n                             }}\n                             maxLength=\"100\"\n                            />\n                            <Send onClick={OnSendMessage} > {\n                                    Loading ? <img src=\"/spin.gif\" width=\"30\"/> : \"SEND\"\n                            } </Send>\n                    </TextPart>\n            </ChatBox>\n    </GeneralWrapper>\n\n\n}\n\n\nexport default Room;","import React , {useEffect} from 'react';\nimport { useLazyQuery } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\nimport { CHECK_TOKEN_QUERY } from '../GraphqQL/Queries/AccountQuery'\nimport  {useDispatch} from 'react-redux'\nimport { Route } from 'react-router-dom'\n\nconst PrivateRoute = ( { component:Component , ...rest } )=>{\n\n    let history = useHistory();\n    let dispatch = useDispatch();\n\n    let [ check , { loading , data } ] = useLazyQuery(CHECK_TOKEN_QUERY , {\n  \n        context:{\n          history\n        } ,\n\n        fetchPolicy:\"network-only\",\n\n        onCompleted:({checkToken})=>{\n\n            dispatch({\n                type:\"SET_USER\",\n                payload:checkToken\n              })\n\n        } , \n \n    })\n\n\n    useEffect(()=>{\n        \n        check() ; \n      \n    },[])\n  \n    return <Route {...rest} \n    \n        component = { props => ( \n\n            !loading && data ? <Component {...props} /> : null\n        \n        ) } />\n  \n}\n\nexport default PrivateRoute;","import logo from './logo.svg';\nimport './App.css';\nimport React  from 'react';\nimport {Provider} from 'react-redux'\nimport { createStore } from 'redux';\nimport { Route ,Link , Redirect , BrowserRouter , useHistory , Switch} from 'react-router-dom'\nimport {\n  ApolloProvider ,\n  ApolloClient ,\n  gql, \n  InMemoryCache,\n  ApolloLink,\n  HttpLink,\n  from,\n  split } from '@apollo/client'\n\nimport { onError } from \"apollo-link-error\";\nimport Login from './Chat-App/Containers/login'\nimport Register from './Chat-App/Containers/register'\nimport UserReducer from './Chat-App/Reducers/userReducer'\nimport MainPage from './Chat-App/Containers/home/main-page';\nimport Room from './Chat-App/Containers/home/room'\nimport PrivateRoute from './Chat-App/Containers/privateRoute'\nimport { logout } from './Chat-App/Actions/action'\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\n\nconst httpTerminatingLink = new HttpLink({\n  uri:\"http://localhost:8000/graphql\"\n});\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:8000/subscriptions\",\n  options: {\n    reconnect: true,\n    connectionParams:{\n      token:localStorage.getItem('token'),\n    }\n  }\n});\n\nconst initalState = { user:{} , error:{} }\n\nconst store = createStore(UserReducer,initalState);\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpTerminatingLink,\n);\n\nconst errorLink = onError(({ graphQLErrors, networkError , operation }) => { // only runs when server respones\n  \n  let errorType , message;\n  let { history } = operation.getContext();\n\n  if (graphQLErrors) {\n\n    for (const el of graphQLErrors) {\n             \n         switch(el.extensions.code) {\n\n          case 'UNAUTHENTICATED': \n                 store.dispatch(logout());\n                 history.push('/login');\n            break;\n          \n         }\n\n         errorType = `[${el.extensions.code}]`;\n         message = message || el.message;\n\n    }\n    \n    store.dispatch({\n      type:\"SET_ERROR\",\n      payload:{\n        errorType,\n        message\n      }\n    })\n\n  }\n\n  if (networkError) { console.log(graphQLErrors) }\n\n});\n\nconst middleWareLink = new ApolloLink( ( operation , forward )=>{\n\n  const token = localStorage.getItem('token');\n  \n  operation.setContext({\n    headers: {\n      ...operation.getContext().headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  })\n\n  return forward(operation);\n\n})\n\nexport const client = new ApolloClient({\n  link:from([\n    middleWareLink,\n    errorLink,\n    splitLink\n  ]),\n  cache: new InMemoryCache()\n})\n\n\nfunction App() {\n\n  return (\n     \n    <ApolloProvider client = {client} >\n\n      <BrowserRouter>\n      \n        <Provider store={store}>\n\n          <Switch>\n\n                <Route exact path=\"/\" component={ ()=> <Redirect to=\"/login\"/> } />\n                <Route path=\"/login\" component= { Login } />\n                <Route path=\"/register\" component={ Register } />\n\n                <PrivateRoute path=\"/main-page\"  component = {MainPage} exact />\n                <PrivateRoute path=\"/room/:id\"   component = {Room}  exact />\n\n          </Switch>\n\n        </Provider>\n      </BrowserRouter>\n\n       \n    </ApolloProvider>\n\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}